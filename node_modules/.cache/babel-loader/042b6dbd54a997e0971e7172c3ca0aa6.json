{"ast":null,"code":"export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\"; // LOGIN\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  };\n}\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  };\n}\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': \"Bearer \".concat(token)\n      }\n    };\n    return fetch('http://localhost:3000/api/v1/current_user', reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error\n        console.log(data.error);\n      } else {\n        dispatch(loginUser({\n          id: data.id,\n          email: data.email,\n          first_name: data.first_name,\n          last_name: data.last_name\n        }));\n        history.push('/search');\n      }\n    });\n  };\n}\nexport function login(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch('http://localhost:3000/api/v1/login', reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n      } else {\n        console.log(data);\n        localStorage.token = data.token;\n        dispatch(loginUser({\n          id: data.id,\n          email: data.email,\n          first_name: data.first_name,\n          last_name: data.last_name\n        }));\n        history.push('/search');\n      }\n    });\n  };\n}\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch('http://localhost:3000/api/v1/auth', reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n      } else {\n        localStorage.token = data.token;\n        dispatch(loginUser({\n          id: data.id,\n          email: data.email,\n          first_name: data.first_name,\n          last_name: data.last_name\n        }));\n        history.push('/search');\n      }\n    });\n  };\n} ////LOGIN\n\nexport function thunkFetchCategories() {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_CATEGORIES\n    });\n    fetch(\"http://localhost:3000/api/v1/categories\").then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_CATEGORIES,\n        categories: data\n      });\n    });\n  };\n}\nexport function thunkFetchLists() {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LISTS\n    });\n    fetch(\"http://localhost:3000/api/v1/lists\").then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_LISTS,\n        lists: data\n      });\n    });\n  };\n} // creating a new lead instance of the one the user saved and creating the association between list and lead\n\nexport function addLead(leadObj, company, website, listId) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        first_name: leadObj.first_name,\n        last_name: leadObj.last_name,\n        email: leadObj.value,\n        phone_number: leadObj.phone_number,\n        position: leadObj.position,\n        confidence_score: leadObj.confidence,\n        company: company,\n        website: website\n      })\n    }).then(res => res.json()).then(data => {\n      fetch(\"http://localhost:3000/api/v1/leadlists\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": 'application/json',\n          \"Accept\": 'application/json'\n        },\n        body: JSON.stringify({\n          list_id: listId,\n          lead_id: data.id\n        })\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function addList(listName) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: ADD_LIST,\n        lists: data\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function thunkFetchLeads(domainName, history) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"https://api.hunter.io/v2/domain-search?domain=\".concat(domainName, \"&limit=10&api_key=7ca084937e5e049696b7bb64c10366c3d077c650\")).then(res => res.json()).then(result => {\n      dispatch({\n        type: FETCH_LEADS,\n        leads: result.data\n      });\n      history.push('/results');\n    }); // ! ASK FOR HELP HERE ////\n    // .then(data => {\n    //   // const dataArray = data[0];\n    //   fetch(\"http://localhost:3000/api/v1/leads\", {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       Accept: \"application/json\"\n    //     },\n    //     body: JSON.stringify({data})\n    //   }).then(res => res.json())\n    //   .then(console.log)\n    //   .catch(err => console.log(err));\n    // });\n  };\n} // .then(console.log\n// const dataArray = data[0];\n// const leadData = dataArray.emails.map(lead => {\n//   return (\n//     first_name: lead.first_name,\n//     last_name: lead.last_name,\n//     confidence_score: lead.confidence,\n//     last_name: params[:last_name],\n//     phone_number: params[:phone_number],\n//     position: params[:position],\n//     email: params[:value],\n//     website: params[:website]\n//   )\n// })\n//   fetch(\"http://localhost:3000/api/v1/leads\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Accept\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//       confidence_score:\n//       first_name:\n//       confidence_score: params[:confidence],\n//       first_name: params[:first_name],\n//       last_name: params[:last_name],\n//       linkedin: params[:linkedin],\n//       phone_number: params[:phone_number],\n//       position: params[:position],\n//       email: params[:value],\n//       website: params[:website]\n//     })\n//   })\n// })\n// .then(result => {\n//   dispatch({ type: FETCH_LEADS, leads: result.data })\n//   history.push('/results')\n// });\n// handleSubmit = () => {\n//   // ACTION - QUERYSEARCH\n//   const domainName = this.state.searchParam\n//   hunter.domainSearch(\n//     {domain: domainName},\n//     function(err, body) {\n//       if (err) {\n//         console.log(err);\n//       } else {\n//         // Will contain same body as the raw API call\n//         console.log(body);\n//       }\n//     }\n//   );\n// }","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/index.js"],"names":["FETCH_CATEGORIES","START_FETCH_CATEGORIES","START_FETCH_LEADS","FETCH_LEADS","START_FETCH_LISTS","FETCH_LISTS","ADD_LIST","LOGIN_USER","LOGOUT_USER","loginUser","user","type","logoutUser","currentUser","history","dispatch","token","localStorage","reqObj","method","headers","fetch","then","resp","json","data","error","console","log","id","email","first_name","last_name","push","login","formData","body","JSON","stringify","registerUser","thunkFetchCategories","res","categories","thunkFetchLists","lists","addLead","leadObj","company","website","listId","value","phone_number","position","confidence_score","confidence","list_id","lead_id","catch","err","addList","listName","name","thunkFetchLeads","domainName","result","leads"],"mappings":"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","sourcesContent":["export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n\n// LOGIN\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  }\n}\n\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  }\n}\n\nexport function currentUser(history) {\n  return (dispatch) => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    }\n\n    return fetch('http://localhost:3000/api/v1/current_user', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error\n          console.log(data.error)\n        } else {\n          dispatch(loginUser({ id: data.id, email: data.email, first_name: data.first_name, last_name: data.last_name}))\n          history.push('/search')\n        }\n      })\n  }\n}\n\nexport function login(formData, history) {\n  return (dispatch) => {\n    const reqObj = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(formData)\n    }\n\n    return fetch('http://localhost:3000/api/v1/login', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error){\n          //handle error case\n          console.log(data.error)\n        } else {\n          console.log(data)\n          localStorage.token = data.token\n          dispatch(loginUser({ id: data.id, email: data.email, first_name: data.first_name, last_name: data.last_name}))\n          history.push('/search')\n        }\n      })\n  }\n}\n\nexport function registerUser(formData, history) {\n  return (dispatch) => {\n    const reqObj = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(formData)\n    }\n\n    return fetch('http://localhost:3000/api/v1/auth', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error){\n          //handle error case\n          console.log(data.error)\n        } else {\n          localStorage.token = data.token\n          dispatch(loginUser({ id: data.id, email: data.email, first_name: data.first_name, last_name: data.last_name}))\n          history.push('/search')\n        }\n      })\n  }\n}\n\n////LOGIN\n\nexport function thunkFetchCategories() {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_CATEGORIES });\n\n    fetch(\"http://localhost:3000/api/v1/categories\")\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_CATEGORIES, categories: data });\n      }); \n  };\n}\n\nexport function thunkFetchLists() {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LISTS });\n\n    fetch(\"http://localhost:3000/api/v1/lists\")\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_LISTS, lists: data });\n      }); \n  };\n}\n// creating a new lead instance of the one the user saved and creating the association between list and lead\nexport function addLead(leadObj, company, website, listId) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        first_name: leadObj.first_name,\n        last_name: leadObj.last_name, \n        email: leadObj.value,\n        phone_number: leadObj.phone_number,\n        position: leadObj.position,\n        confidence_score: leadObj.confidence,\n        company: company,\n        website: website\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        fetch(\"http://localhost:3000/api/v1/leadlists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n          },\n          body: JSON.stringify({\n            list_id: listId,\n            lead_id: data.id\n          })\n        })\n      })\n      .catch(err => console.log(err)); \n  };\n}\n\nexport function addList(listName) {\n  return function(dispatch) {\n\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: ADD_LIST, lists: data})\n      })\n      .catch(err => console.log(err)); \n  };\n}\n\nexport function thunkFetchLeads(domainName, history) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\n      `https://api.hunter.io/v2/domain-search?domain=${domainName}&limit=10&api_key=7ca084937e5e049696b7bb64c10366c3d077c650`\n    )\n      .then(res => res.json())\n      .then(result => {\n        dispatch({ type: FETCH_LEADS, leads: result.data })\n        history.push('/results')\n      });\n\n\n      // ! ASK FOR HELP HERE ////\n      // .then(data => {\n      //   // const dataArray = data[0];\n      //   fetch(\"http://localhost:3000/api/v1/leads\", {\n      //     method: \"POST\",\n      //     headers: {\n      //       \"Content-Type\": \"application/json\",\n      //       Accept: \"application/json\"\n      //     },\n      //     body: JSON.stringify({data})\n      //   }).then(res => res.json())\n      //   .then(console.log)\n      //   .catch(err => console.log(err));\n      // });\n  };\n}\n\n// .then(console.log\n// const dataArray = data[0];\n// const leadData = dataArray.emails.map(lead => {\n//   return (\n//     first_name: lead.first_name,\n//     last_name: lead.last_name,\n//     confidence_score: lead.confidence,\n//     last_name: params[:last_name],\n//     phone_number: params[:phone_number],\n//     position: params[:position],\n//     email: params[:value],\n//     website: params[:website]\n//   )\n// })\n//   fetch(\"http://localhost:3000/api/v1/leads\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Accept\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//       confidence_score:\n//       first_name:\n//       confidence_score: params[:confidence],\n//       first_name: params[:first_name],\n//       last_name: params[:last_name],\n//       linkedin: params[:linkedin],\n//       phone_number: params[:phone_number],\n//       position: params[:position],\n//       email: params[:value],\n//       website: params[:website]\n//     })\n//   })\n// })\n// .then(result => {\n//   dispatch({ type: FETCH_LEADS, leads: result.data })\n//   history.push('/results')\n// });\n\n// handleSubmit = () => {\n//   // ACTION - QUERYSEARCH\n//   const domainName = this.state.searchParam\n//   hunter.domainSearch(\n//     {domain: domainName},\n//     function(err, body) {\n//       if (err) {\n//         console.log(err);\n//       } else {\n//         // Will contain same body as the raw API call\n//         console.log(body);\n//       }\n//     }\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}