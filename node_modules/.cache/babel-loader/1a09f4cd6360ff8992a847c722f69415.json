{"ast":null,"code":"import _defineProperty from \"/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_LIST_BY_ID, SORT_LEADLISTS, DELETE_LISTLEAD, ADD_LEAD_NOTE } from \"../actions/types\"; // ? Updates state with the lead-> leadnote association data for LeadList.js\n\nexport default function listleads(state = {\n  leads: [],\n  list: []\n}, action) {\n  switch (action.type) {\n    case FETCH_LIST_BY_ID:\n      return {\n        leads: action.leads,\n        list: action.list\n      };\n\n    case SORT_LEADLISTS:\n      return _objectSpread({}, state, {\n        leads: action.leads\n      });\n\n    case DELETE_LISTLEAD:\n      return _objectSpread({}, state, {\n        leads: state.leads.filter(lead => lead.lead.id !== action.id)\n      });\n\n    case ADD_LEAD_NOTE:\n      const newLeadWithNote = state.leads.map(leadObj => {\n        if (action.id === leadObj.lead.id) {\n          return {\n            lead: leadObj.lead,\n            leadnotes: [...leadObj.leadnotes, action.leadnote] // lead: leadObj.lead,\n            // list_id: leadObj.list_id,\n            // leadnotes: [...leadObj.leadnotes, action.leadnote]\n\n          }; // swap out\n        } else {\n          return leadObj;\n        }\n      });\n      return _objectSpread({}, state, {\n        leads: newLeadWithNote\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/reducers/listleads.js"],"names":["FETCH_LIST_BY_ID","SORT_LEADLISTS","DELETE_LISTLEAD","ADD_LEAD_NOTE","listleads","state","leads","list","action","type","filter","lead","id","newLeadWithNote","map","leadObj","leadnotes","leadnote"],"mappings":";;;;;;AAAA,SACEA,gBADF,EACoBC,cADpB,EACoCC,eADpC,EACqDC,aADrD,QAEO,kBAFP,C,CAKA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,IAAI,EAAE;AAAnB,CAA3B,EAAoDC,MAApD,EAA4D;AACzE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,gBAAL;AACE,aAAO;AAAEM,QAAAA,KAAK,EAAEE,MAAM,CAACF,KAAhB;AAAuBC,QAAAA,IAAI,EAAEC,MAAM,CAACD;AAApC,OAAP;;AACA,SAAKN,cAAL;AACE,+BAAWI,KAAX;AAAkBC,QAAAA,KAAK,EAAEE,MAAM,CAACF;AAAhC;;AACJ,SAAKJ,eAAL;AACE,+BACKG,KADL;AAEEC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,CAAYI,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACA,IAAL,CAAUC,EAAV,KAAiBJ,MAAM,CAACI,EAAnD;AAFT;;AAIA,SAAKT,aAAL;AACI,YAAMU,eAAe,GAAGR,KAAK,CAACC,KAAN,CAAYQ,GAAZ,CAAgBC,OAAO,IAAI;AACjD,YAAIP,MAAM,CAACI,EAAP,KAAcG,OAAO,CAACJ,IAAR,CAAaC,EAA/B,EAAmC;AACjC,iBAAO;AACLD,YAAAA,IAAI,EAAEI,OAAO,CAACJ,IADT;AAELK,YAAAA,SAAS,EAAE,CAAC,GAAGD,OAAO,CAACC,SAAZ,EAAuBR,MAAM,CAACS,QAA9B,CAFN,CAIL;AACA;AACA;;AANK,WAAP,CADiC,CASjC;AACD,SAVD,MAUO;AACL,iBAAOF,OAAP;AACD;AACF,OAduB,CAAxB;AAeA,+BAAWV,KAAX;AAAkBC,QAAAA,KAAK,EAAEO;AAAzB;;AACN;AACE,aAAOR,KAAP;AA5BJ;AA8BD","sourcesContent":["import {\n  FETCH_LIST_BY_ID, SORT_LEADLISTS, DELETE_LISTLEAD, ADD_LEAD_NOTE\n} from \"../actions/types\";\n\n\n// ? Updates state with the lead-> leadnote association data for LeadList.js\n\nexport default function listleads(state = { leads: [], list: [] }, action) {\n  switch (action.type) {\n    case FETCH_LIST_BY_ID:\n      return { leads: action.leads, list: action.list };\n      case SORT_LEADLISTS:\n        return {...state, leads: action.leads}\n    case DELETE_LISTLEAD:\n      return {\n        ...state,\n        leads: state.leads.filter(lead => lead.lead.id !== action.id)\n      };\n      case ADD_LEAD_NOTE:\n          const newLeadWithNote = state.leads.map(leadObj => {\n            if (action.id === leadObj.lead.id) {\n              return {\n                lead: leadObj.lead,\n                leadnotes: [...leadObj.leadnotes, action.leadnote]\n\n                // lead: leadObj.lead,\n                // list_id: leadObj.list_id,\n                // leadnotes: [...leadObj.leadnotes, action.leadnote]\n              };\n              // swap out\n            } else {\n              return leadObj;\n            }\n          });\n          return {...state, leads: newLeadWithNote}\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}