{"ast":null,"code":"// import React from 'react';\n// import PropTypes from 'prop-types';\n// import clsx from 'clsx';\n// import { lighten, makeStyles } from '@material-ui/core/styles';\n// import Button from '@material-ui/core/Button';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Switch from '@material-ui/core/Switch';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { connect } from \"react-redux\";\n// function createData(first, last, email, position, confidence) {\n//   return { first, last, email, position, confidence };\n// }\n// const rows = [\n//   createData(\"Cupcake\", 305, 3.7, 67, 4.3)\n// ];\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n// const headCells = [\n//   { id: 'first', numeric: false, disablePadding: true, label: 'First Name' },\n//   { id: 'last', numeric: true, disablePadding: false, label: 'Last Name' },\n//   { id: 'email', numeric: true, disablePadding: false, label:  'Email' },\n//   { id: 'position', numeric: true, disablePadding: false, label: 'Position' },\n//   { id: 'confidence', numeric: true, disablePadding: false, label: 'Confidence' },\n// ];\n// function EnhancedTableHead(props) {\n//   const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n//   const createSortHandler = property => event => {\n//     onRequestSort(event, property);\n//   };\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{ 'aria-label': 'select all desserts' }}\n//           />\n//         </TableCell>\n//         {headCells.map(headCell => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'default'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={order}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <span className={classes.visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </span>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n// EnhancedTableHead.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// const useToolbarStyles = makeStyles(theme => ({\n//   root: {\n//     paddingLeft: theme.spacing(2),\n//     paddingRight: theme.spacing(1),\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: '#1a237e',\n//           backgroundColor: '#A3A0FB',\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: 'black',\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// }));\n// const EnhancedTableToolbar = props => {\n//   const classes = useToolbarStyles();\n//   const { numSelected } = props;\n//   return (\n//     <Toolbar\n//       className={clsx(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography style={{color:\"#1a237e\"}} variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Results\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Add\">\n//             <Button>Add to Leads</Button>\n//           </Tooltip>\n//         ) : null }\n//       </div>\n//     </Toolbar>\n//   );\n// };\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n// };\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing(3),\n//   },\n//   paper: {\n//     width: '100%',\n//     marginBottom: theme.spacing(2),\n//   },\n//   table: {\n//     minWidth: 750,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n//   visuallyHidden: {\n//     border: 0,\n//     clip: 'rect(0 0 0 0)',\n//     height: 1,\n//     margin: -1,\n//     overflow: 'hidden',\n//     padding: 0,\n//     position: 'absolute',\n//     top: 20,\n//     width: 1,\n//   },\n// }));\n// function EnhancedTable() {\n//   const classes = useStyles();\n//   const [order, setOrder] = React.useState('asc');\n//   const [orderBy, setOrderBy] = React.useState('last');\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const dataArray = this.props.leads[0]\n//   // console.log(dataArray)\n//   const rows = dataArray.emails.map(lead => {\n//     return {first: lead.first_name, last: lead.last_name, email: lead.value, position: lead.position, company: dataArray.organization, confidence: lead.confidence}\n//   })\n//   function handleRequestSort(event, property) {\n//     const isDesc = orderBy === property && order === 'desc';\n//     setOrder(isDesc ? 'asc' : 'desc');\n//     setOrderBy(property);\n//   }\n//   function handleSelectAllClick(event) {\n//     if (event.target.checked) {\n//       const newSelecteds = rows.map(n => n.first);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   }\n//   function handleClick(event, first) {\n//     const selectedIndex = selected.indexOf(first);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, first);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     setSelected(newSelected);\n//   }\n//   function handleChangePage(event, newPage) {\n//     setPage(newPage);\n//   }\n//   function handleChangeRowsPerPage(event) {\n//     setRowsPerPage(+event.target.value);\n//     setPage(0);\n//   }\n//   const isSelected = first => selected.indexOf(first) !== -1;\n//   const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n//   return (\n//     <div className={classes.root}>\n//       <Paper className={classes.paper}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table\n//             className={classes.table}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? 'small' : 'medium'}\n//           >\n//             <EnhancedTableHead\n//               classes={classes}\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {stableSort(rows, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.first);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => handleClick(event, row.first)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={row.first}\n//                       selected={isItemSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={isItemSelected}\n//                           inputProps={{ 'aria-labelledby': labelId }}\n//                         />\n//                       </TableCell>\n//                       <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n//                         {row.first}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{row.last}</TableCell>\n//                       <TableCell align=\"right\">{row.email}</TableCell>\n//                       <TableCell align=\"right\">{row.position}</TableCell>\n//                       <TableCell align=\"right\">{row.company}</TableCell>\n//                       <TableCell align=\"right\">{row.confidence}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[10,20,50]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'previous page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'next page',\n//           }}\n//           onChangePage={handleChangePage}\n//           onChangeRowsPerPage={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//       {/* <FormControlLabel\n//         control={<Switch checked={dense} onChange={handleChangeDense} />}\n//         label=\"Dense padding\"\n//       /> */}\n//     </div>\n//   );\n// }\n// const mapStateToProps = state => {\n//   return {leads: state.leads}\n// }\n// export default connect(mapStateToProps, null)(EnhancedTable)","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/components/SearchResultsTest.js"],"names":[],"mappingssourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n// import clsx from 'clsx';\n// import { lighten, makeStyles } from '@material-ui/core/styles';\n// import Button from '@material-ui/core/Button';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Switch from '@material-ui/core/Switch';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { connect } from \"react-redux\";\n\n// function createData(first, last, email, position, confidence) {\n//   return { first, last, email, position, confidence };\n// }\n// const rows = [\n//   createData(\"Cupcake\", 305, 3.7, 67, 4.3)\n// ];\n\n\n\n\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n\n// const headCells = [\n//   { id: 'first', numeric: false, disablePadding: true, label: 'First Name' },\n//   { id: 'last', numeric: true, disablePadding: false, label: 'Last Name' },\n//   { id: 'email', numeric: true, disablePadding: false, label:  'Email' },\n//   { id: 'position', numeric: true, disablePadding: false, label: 'Position' },\n//   { id: 'confidence', numeric: true, disablePadding: false, label: 'Confidence' },\n// ];\n\n// function EnhancedTableHead(props) {\n//   const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n//   const createSortHandler = property => event => {\n//     onRequestSort(event, property);\n//   };\n\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{ 'aria-label': 'select all desserts' }}\n//           />\n//         </TableCell>\n//         {headCells.map(headCell => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'default'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={order}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <span className={classes.visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </span>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n\n// EnhancedTableHead.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// const useToolbarStyles = makeStyles(theme => ({\n//   root: {\n//     paddingLeft: theme.spacing(2),\n//     paddingRight: theme.spacing(1),\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: '#1a237e',\n//           backgroundColor: '#A3A0FB',\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: 'black',\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// }));\n\n// const EnhancedTableToolbar = props => {\n//   const classes = useToolbarStyles();\n//   const { numSelected } = props;\n\n//   return (\n//     <Toolbar\n//       className={clsx(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography style={{color:\"#1a237e\"}} variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Results\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Add\">\n//             <Button>Add to Leads</Button>\n//           </Tooltip>\n//         ) : null }\n//       </div>\n//     </Toolbar>\n//   );\n// };\n\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n// };\n\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing(3),\n//   },\n//   paper: {\n//     width: '100%',\n//     marginBottom: theme.spacing(2),\n//   },\n//   table: {\n//     minWidth: 750,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n//   visuallyHidden: {\n//     border: 0,\n//     clip: 'rect(0 0 0 0)',\n//     height: 1,\n//     margin: -1,\n//     overflow: 'hidden',\n//     padding: 0,\n//     position: 'absolute',\n//     top: 20,\n//     width: 1,\n//   },\n// }));\n\n// function EnhancedTable() {\n//   const classes = useStyles();\n//   const [order, setOrder] = React.useState('asc');\n//   const [orderBy, setOrderBy] = React.useState('last');\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n//   const dataArray = this.props.leads[0]\n//   // console.log(dataArray)\n//   const rows = dataArray.emails.map(lead => {\n//     return {first: lead.first_name, last: lead.last_name, email: lead.value, position: lead.position, company: dataArray.organization, confidence: lead.confidence}\n//   })\n\n//   function handleRequestSort(event, property) {\n//     const isDesc = orderBy === property && order === 'desc';\n//     setOrder(isDesc ? 'asc' : 'desc');\n//     setOrderBy(property);\n//   }\n\n//   function handleSelectAllClick(event) {\n//     if (event.target.checked) {\n//       const newSelecteds = rows.map(n => n.first);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   }\n\n//   function handleClick(event, first) {\n//     const selectedIndex = selected.indexOf(first);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, first);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n\n//     setSelected(newSelected);\n//   }\n\n//   function handleChangePage(event, newPage) {\n//     setPage(newPage);\n//   }\n\n//   function handleChangeRowsPerPage(event) {\n//     setRowsPerPage(+event.target.value);\n//     setPage(0);\n//   }\n\n//   const isSelected = first => selected.indexOf(first) !== -1;\n\n//   const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n//   return (\n//     <div className={classes.root}>\n//       <Paper className={classes.paper}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table\n//             className={classes.table}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? 'small' : 'medium'}\n//           >\n//             <EnhancedTableHead\n//               classes={classes}\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {stableSort(rows, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.first);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => handleClick(event, row.first)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={row.first}\n//                       selected={isItemSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={isItemSelected}\n//                           inputProps={{ 'aria-labelledby': labelId }}\n//                         />\n//                       </TableCell>\n//                       <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n//                         {row.first}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{row.last}</TableCell>\n//                       <TableCell align=\"right\">{row.email}</TableCell>\n//                       <TableCell align=\"right\">{row.position}</TableCell>\n//                       <TableCell align=\"right\">{row.company}</TableCell>\n//                       <TableCell align=\"right\">{row.confidence}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[10,20,50]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'previous page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'next page',\n//           }}\n//           onChangePage={handleChangePage}\n//           onChangeRowsPerPage={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//       {/* <FormControlLabel\n//         control={<Switch checked={dense} onChange={handleChangeDense} />}\n//         label=\"Dense padding\"\n//       /> */}\n//     </div>\n//   );\n// }\n\n// const mapStateToProps = state => {\n//   return {leads: state.leads}\n// }\n\n// export default connect(mapStateToProps, null)(EnhancedTable)"]},"metadata":{},"sourceType":"module"}