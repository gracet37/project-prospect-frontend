{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar depd, deprecate, fs, helpers, request, requestJson, url;\nrequest = require(\"request\");\nfs = require(\"fs\");\nurl = require(\"url\");\ndepd = require(\"depd\");\ndeprecate = depd(\"request-json\");\nrequestJson = module.exports;\n\nrequestJson.createClient = function (url, options) {\n  if (options == null) {\n    options = {};\n  }\n\n  return new requestJson.JsonClient(url, options);\n};\n\nrequestJson.newClient = function (url, options) {\n  if (options == null) {\n    options = {};\n  }\n\n  deprecate(\"newClient() is deprecated, please use createClient()\");\n  return requestJson.createClient(url, options);\n};\n\nhelpers = {\n  merge: function (obj1, obj2) {\n    var key, result;\n    result = {};\n\n    for (key in obj1) {\n      result[key] = obj1[key];\n    }\n\n    if (obj2 != null) {\n      for (key in obj2) {\n        result[key] = obj2[key];\n      }\n    }\n\n    return result;\n  },\n  buildOptions: function (clientOptions, clientHeaders, host, path, requestOptions) {\n    var options;\n\n    if (requestOptions !== {}) {\n      options = helpers.merge(clientOptions, requestOptions);\n    }\n\n    if (requestOptions != null && requestOptions !== {} && requestOptions.headers) {\n      options.headers = helpers.merge(clientHeaders, requestOptions.headers);\n    } else {\n      options.headers = clientHeaders;\n    }\n\n    options.uri = url.resolve(host, path);\n    return options;\n  },\n  parseBody: function (error, response, body, callback) {\n    var err, error1, msg, parsed;\n\n    if (typeof body === \"string\" && body !== \"\") {\n      try {\n        parsed = JSON.parse(body);\n      } catch (error1) {\n        err = error1;\n        msg = \"Parsing error : \" + err.message + \", body= \\n \" + body;\n\n        if (error == null) {\n          error = new Error(msg);\n        }\n\n        parsed = body;\n      }\n    } else {\n      parsed = body;\n    }\n\n    return callback(error, response, parsed);\n  }\n};\n\nrequestJson.JsonClient = function () {\n  function JsonClient(host1, options1) {\n    var ref;\n    this.host = host1;\n    this.options = options1 != null ? options1 : {};\n    this.headers = (ref = this.options.headers) != null ? ref : {};\n    this.headers['accept'] = 'application/json';\n    this.headers['user-agent'] = \"request-json/1.0\";\n  }\n\n  JsonClient.prototype.setBasicAuth = function (username, password) {\n    return this.options.auth = {\n      user: username,\n      pass: password\n    };\n  };\n\n  JsonClient.prototype.setDigestAuth = function (username, password) {\n    return this.options.auth = {\n      user: username,\n      pass: password,\n      sendImmediately: false\n    };\n  };\n\n  JsonClient.prototype.setToken = function (token) {\n    return this.headers[\"x-auth-token\"] = token;\n  };\n\n  JsonClient.prototype.setBearerToken = function (token) {\n    return this.options.auth = {\n      bearer: token\n    };\n  };\n\n  JsonClient.prototype.handleRequest = function (method, path, json, options, callback, parse) {\n    var Promise, opts;\n\n    if (parse == null) {\n      parse = true;\n    }\n\n    if (typeof options === 'function') {\n      if (typeof callback === 'boolean') {\n        parse = callback;\n      }\n\n      callback = options;\n      options = {};\n    }\n\n    if (typeof callback !== 'function') {\n      Promise = this.getPromise();\n      return new Promise(function (_this) {\n        return function (resolve, reject) {\n          return _this.handleRequest(method, path, json, options, function (err, res, body) {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve({\n              res: res,\n              body: body\n            });\n          }, parse);\n        };\n      }(this));\n    } else {\n      opts = helpers.buildOptions(this.options, this.headers, this.host, path, options);\n      opts.method = method;\n\n      if (json != null) {\n        opts.json = json;\n      }\n\n      return request(opts, function (error, response, body) {\n        if (parse) {\n          return helpers.parseBody(error, response, body, callback);\n        } else {\n          return callback(error, response, body);\n        }\n      });\n    }\n  };\n\n  JsonClient.prototype.get = function (path, options, callback, parse) {\n    if (parse == null) {\n      parse = true;\n    }\n\n    return this.handleRequest('GET', path, null, options, callback);\n  };\n\n  JsonClient.prototype.post = function (path, json, options, callback, parse) {\n    if (parse == null) {\n      parse = true;\n    }\n\n    return this.handleRequest('POST', path, json, options, callback);\n  };\n\n  JsonClient.prototype.put = function (path, json, options, callback, parse) {\n    if (parse == null) {\n      parse = true;\n    }\n\n    return this.handleRequest('PUT', path, json, options, callback);\n  };\n\n  JsonClient.prototype.patch = function (path, json, options, callback, parse) {\n    if (parse == null) {\n      parse = true;\n    }\n\n    return this.handleRequest('PATCH', path, json, options, callback);\n  };\n\n  JsonClient.prototype.head = function (path, options, callback) {\n    return this.handleRequest('HEAD', path, null, options, callback);\n  };\n\n  JsonClient.prototype.del = function (path, options, callback, parse) {\n    if (parse == null) {\n      parse = true;\n    }\n\n    return this.handleRequest('DELETE', path, null, options, callback);\n  };\n\n  JsonClient.prototype[\"delete\"] = function (path, options, callback, parse) {\n    if (parse == null) {\n      parse = true;\n    }\n\n    return this.del(path, options, callback, parse);\n  };\n\n  JsonClient.prototype.sendFile = function (path, files, data, callback) {\n    var att, file, form, i, index, len, req, results;\n\n    if (typeof data === \"function\") {\n      callback = data;\n    }\n\n    req = this.post(path, null, callback, false);\n    form = req.form();\n\n    if (typeof data !== \"function\") {\n      for (att in data) {\n        form.append(att, data[att]);\n      }\n    }\n\n    if (typeof files === \"string\") {\n      return form.append(\"file\", fs.createReadStream(files));\n    } else if (!Array.isArray(files)) {\n      return form.append(\"file\", files);\n    } else {\n      index = 0;\n      results = [];\n\n      for (i = 0, len = files.length; i < len; i++) {\n        file = files[i];\n        index++;\n\n        if (typeof file === \"string\") {\n          results.push(form.append(\"file\" + index, fs.createReadStream(file)));\n        } else {\n          results.push(form.append(\"file\" + index, file));\n        }\n      }\n\n      return results;\n    }\n  };\n\n  JsonClient.prototype.putFile = function (path, file, data, callback) {\n    var req;\n\n    if (typeof data === \"function\") {\n      callback = data;\n    }\n\n    req = this.put(path, null, callback, false);\n\n    if (typeof file === \"string\") {\n      return fs.createReadStream(file).pipe(req);\n    } else if (!Array.isArray(file)) {\n      return file.pipe(req);\n    }\n  };\n\n  JsonClient.prototype.saveFile = function (path, filePath, callback) {\n    var stream;\n    stream = this.get(path, callback, false);\n    return stream.pipe(fs.createWriteStream(filePath));\n  };\n\n  JsonClient.prototype.saveFileAsStream = function (path, callback) {\n    return this.get(path, callback, false);\n  };\n\n  JsonClient.prototype.getPromise = function () {\n    var Promise;\n    Promise = this.options.Promise || global.Promise;\n\n    if (!Promise) {\n      throw new Error(\"No Promise provided\");\n    }\n\n    return Promise;\n  };\n\n  return JsonClient;\n}();","map":null,"metadata":{},"sourceType":"script"}