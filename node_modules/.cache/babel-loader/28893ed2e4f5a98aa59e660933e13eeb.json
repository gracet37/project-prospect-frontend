{"ast":null,"code":"// All redux functions that relate to leads\nimport { FETCH_LEADS, START_FETCH_LEADS, START_FETCH_LEADS_AND_LIST, SUCCESS_MESSAGE, ADD_LIST, ADD_METRIC_LEADS } from './types';\n\nconst uuidv1 = require(\"uuid/v1\");\n\nexport function thunkFetchLeads(domainName, history) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"https://api.hunter.io/v2/domain-search?domain=\".concat(domainName, \"&limit=100&api_key=7ca084937e5e049696b7bb64c10366c3d077c650\")).then(res => res.json()).then(result => {\n      dispatch({\n        type: FETCH_LEADS,\n        id: uuidv1(),\n        leads: result.data\n      });\n      history.push(\"/results\");\n    });\n  };\n} // ? creating a new lead instance of the one the user saved and creating the association between list and lead\n\nexport function addLead(selected, company, website, listId, newListName, userId) {\n  return function (dispatch) {\n    // const token = localStorage.token;\n    dispatch({\n      type: START_FETCH_LEADS_AND_LIST\n    });\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        selected,\n        company: company,\n        website: website\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      const leadsData = data;\n\n      if (listId) {\n        data.forEach(lead => {\n          fetch(\"http://localhost:3000/api/v1/leadlists\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n              list_id: listId,\n              lead_id: lead.id\n            })\n          }).then(res => res.json()).then(data => {\n            dispatch({\n              type: SUCCESS_MESSAGE,\n              message: data.message\n            });\n          }).catch(err => console.log(err));\n        });\n      } else {\n        fetch(\"http://localhost:3000/api/v1/lists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          },\n          body: JSON.stringify({\n            name: newListName,\n            user_id: userId\n          })\n        }).then(res => res.json()).then(data => {\n          dispatch({\n            type: ADD_LIST,\n            list: data\n          });\n          leadsData.forEach(lead => {\n            fetch(\"http://localhost:3000/api/v1/leadlists\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n              },\n              body: JSON.stringify({\n                list_id: data.id,\n                lead_id: lead.id\n              })\n            }) // end of the fetch\n            .then(res => res.json()).then(data => {\n              dispatch({\n                type: SUCCESS_MESSAGE,\n                message: data.message\n              });\n            }).catch(err => console.log(err));\n          });\n        }).catch(err => console.log(err));\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function metricLeads(leads, history, title) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_METRIC_LEADS,\n      leads,\n      title\n    });\n    history.push('/detailed');\n  };\n}","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/leads.js"],"names":["FETCH_LEADS","START_FETCH_LEADS","START_FETCH_LEADS_AND_LIST","SUCCESS_MESSAGE","ADD_LIST","ADD_METRIC_LEADS","uuidv1","require","thunkFetchLeads","domainName","history","dispatch","type","fetch","then","res","json","result","id","leads","data","push","addLead","selected","company","website","listId","newListName","userId","method","headers","Accept","body","JSON","stringify","console","log","leadsData","forEach","lead","list_id","lead_id","message","catch","err","name","user_id","list","metricLeads","title"],"mappings":"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","sourcesContent":["// All redux functions that relate to leads\n\nimport { FETCH_LEADS, START_FETCH_LEADS, START_FETCH_LEADS_AND_LIST, SUCCESS_MESSAGE, ADD_LIST, ADD_METRIC_LEADS } from './types'\n\nconst uuidv1 = require(\"uuid/v1\");\n\n\nexport function thunkFetchLeads(domainName, history) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\n      `https://api.hunter.io/v2/domain-search?domain=${domainName}&limit=100&api_key=7ca084937e5e049696b7bb64c10366c3d077c650`\n    )\n      .then(res => res.json())\n      .then(result => {\n        dispatch({ type: FETCH_LEADS, id: uuidv1(), leads: result.data });\n        history.push(\"/results\");\n      });\n  };\n}\n\n// ? creating a new lead instance of the one the user saved and creating the association between list and lead\nexport function addLead(\n  selected,\n  company,\n  website,\n  listId,\n  newListName,\n  userId\n) {\n  return function(dispatch) {\n    // const token = localStorage.token;\n    dispatch({ type: START_FETCH_LEADS_AND_LIST });\n\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        selected,\n        company: company,\n        website: website\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        const leadsData = data;\n        if (listId) {\n          data.forEach(lead => {\n            fetch(\"http://localhost:3000/api/v1/leadlists\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n              },\n              body: JSON.stringify({\n                list_id: listId,\n                lead_id: lead.id\n              })\n            })\n              .then(res => res.json())\n              .then(data => {\n                dispatch({ type: SUCCESS_MESSAGE, message: data.message });\n              })\n              .catch(err => console.log(err));\n          });\n        } else {\n          fetch(\"http://localhost:3000/api/v1/lists\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n              name: newListName,\n              user_id: userId\n            })\n          })\n            .then(res => res.json())\n            .then(data => {\n              dispatch({ type: ADD_LIST, list: data });\n              leadsData.forEach(lead => {\n                fetch(\"http://localhost:3000/api/v1/leadlists\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    list_id: data.id,\n                    lead_id: lead.id\n                  })\n                }) // end of the fetch\n                  .then(res => res.json())\n                  .then(data => {\n                    dispatch({ type: SUCCESS_MESSAGE, message: data.message });\n                  })\n                  .catch(err => console.log(err));\n              });\n            })\n            .catch(err => console.log(err));\n        }\n      })\n      .catch(err => console.log(err));\n  };\n}\n\nexport function metricLeads(leads, history, title) {\n  return function(dispatch) {\n    dispatch({type: ADD_METRIC_LEADS, leads, title})\n      history.push('/detailed')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}