{"ast":null,"code":"export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport function thunkFetchCategories() {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_CATEGORIES\n    });\n    fetch(\"http://localhost:3000/api/v1/categories\").then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_CATEGORIES,\n        categories: data\n      });\n    });\n  };\n}\nexport function thunkFetchLists() {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LISTS\n    });\n    fetch(\"http://localhost:3000/api/v1/lists\").then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_LISTS,\n        lists: data\n      });\n    });\n  };\n}\nexport function addLead(listName) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: ADD_LIST,\n        lists: data\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function addList(listName) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: ADD_LIST,\n        lists: data\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function thunkFetchLeads(domainName, history) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"https://api.hunter.io/v2/domain-search?domain=\".concat(domainName, \"&limit=10&api_key=7ca084937e5e049696b7bb64c10366c3d077c650\")).then(res => res.json()).then(result => {\n      dispatch({\n        type: FETCH_LEADS,\n        leads: result.data\n      });\n      history.push('/results');\n    }); // ! ASK FOR HELP HERE ////\n    // .then(data => {\n    //   // const dataArray = data[0];\n    //   fetch(\"http://localhost:3000/api/v1/leads\", {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       Accept: \"application/json\"\n    //     },\n    //     body: JSON.stringify({data})\n    //   }).then(res => res.json())\n    //   .then(console.log)\n    //   .catch(err => console.log(err));\n    // });\n  };\n} // .then(console.log\n// const dataArray = data[0];\n// const leadData = dataArray.emails.map(lead => {\n//   return (\n//     first_name: lead.first_name,\n//     last_name: lead.last_name,\n//     confidence_score: lead.confidence,\n//     last_name: params[:last_name],\n//     phone_number: params[:phone_number],\n//     position: params[:position],\n//     email: params[:value],\n//     website: params[:website]\n//   )\n// })\n//   fetch(\"http://localhost:3000/api/v1/leads\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Accept\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//       confidence_score:\n//       first_name:\n//       confidence_score: params[:confidence],\n//       first_name: params[:first_name],\n//       last_name: params[:last_name],\n//       linkedin: params[:linkedin],\n//       phone_number: params[:phone_number],\n//       position: params[:position],\n//       email: params[:value],\n//       website: params[:website]\n//     })\n//   })\n// })\n// .then(result => {\n//   dispatch({ type: FETCH_LEADS, leads: result.data })\n//   history.push('/results')\n// });\n// handleSubmit = () => {\n//   // ACTION - QUERYSEARCH\n//   const domainName = this.state.searchParam\n//   hunter.domainSearch(\n//     {domain: domainName},\n//     function(err, body) {\n//       if (err) {\n//         console.log(err);\n//       } else {\n//         // Will contain same body as the raw API call\n//         console.log(body);\n//       }\n//     }\n//   );\n// }","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/index.js"],"names":["FETCH_CATEGORIES","START_FETCH_CATEGORIES","START_FETCH_LEADS","FETCH_LEADS","START_FETCH_LISTS","FETCH_LISTS","ADD_LIST","thunkFetchCategories","dispatch","type","fetch","then","res","json","data","categories","thunkFetchLists","lists","addLead","listName","method","headers","body","JSON","stringify","name","catch","err","console","log","addList","thunkFetchLeads","domainName","history","result","leads","push"],"mappings":"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","sourcesContent":["export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const ADD_LIST = \"ADD_LIST\";\n\nexport function thunkFetchCategories() {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_CATEGORIES });\n\n    fetch(\"http://localhost:3000/api/v1/categories\")\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_CATEGORIES, categories: data });\n      }); \n  };\n}\n\nexport function thunkFetchLists() {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LISTS });\n\n    fetch(\"http://localhost:3000/api/v1/lists\")\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_LISTS, lists: data });\n      }); \n  };\n}\n\nexport function addLead(listName) {\n  return function(dispatch) {\n\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: ADD_LIST, lists: data})\n      })\n      .catch(err => console.log(err)); \n  };\n}\n\nexport function addList(listName) {\n  return function(dispatch) {\n\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: ADD_LIST, lists: data})\n      })\n      .catch(err => console.log(err)); \n  };\n}\n\nexport function thunkFetchLeads(domainName, history) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\n      `https://api.hunter.io/v2/domain-search?domain=${domainName}&limit=10&api_key=7ca084937e5e049696b7bb64c10366c3d077c650`\n    )\n      .then(res => res.json())\n      .then(result => {\n        dispatch({ type: FETCH_LEADS, leads: result.data })\n        history.push('/results')\n      });\n\n\n      // ! ASK FOR HELP HERE ////\n      // .then(data => {\n      //   // const dataArray = data[0];\n      //   fetch(\"http://localhost:3000/api/v1/leads\", {\n      //     method: \"POST\",\n      //     headers: {\n      //       \"Content-Type\": \"application/json\",\n      //       Accept: \"application/json\"\n      //     },\n      //     body: JSON.stringify({data})\n      //   }).then(res => res.json())\n      //   .then(console.log)\n      //   .catch(err => console.log(err));\n      // });\n  };\n}\n\n// .then(console.log\n// const dataArray = data[0];\n// const leadData = dataArray.emails.map(lead => {\n//   return (\n//     first_name: lead.first_name,\n//     last_name: lead.last_name,\n//     confidence_score: lead.confidence,\n//     last_name: params[:last_name],\n//     phone_number: params[:phone_number],\n//     position: params[:position],\n//     email: params[:value],\n//     website: params[:website]\n//   )\n// })\n//   fetch(\"http://localhost:3000/api/v1/leads\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Accept\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//       confidence_score:\n//       first_name:\n//       confidence_score: params[:confidence],\n//       first_name: params[:first_name],\n//       last_name: params[:last_name],\n//       linkedin: params[:linkedin],\n//       phone_number: params[:phone_number],\n//       position: params[:position],\n//       email: params[:value],\n//       website: params[:website]\n//     })\n//   })\n// })\n// .then(result => {\n//   dispatch({ type: FETCH_LEADS, leads: result.data })\n//   history.push('/results')\n// });\n\n// handleSubmit = () => {\n//   // ACTION - QUERYSEARCH\n//   const domainName = this.state.searchParam\n//   hunter.domainSearch(\n//     {domain: domainName},\n//     function(err, body) {\n//       if (err) {\n//         console.log(err);\n//       } else {\n//         // Will contain same body as the raw API call\n//         console.log(body);\n//       }\n//     }\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}