{"ast":null,"code":"export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const START_FETCH_LEADNOTES = \"START_FETCH_LEADNOTES\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LEADNOTES = \"FETCH_LEADNOTES\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const START_DELETE_LIST = \"START_DELETE_LIST\";\nexport const START_DELETE_LEAD = \"START_DELETE_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const DELETE_LISTLEAD = \"DELETE_LISTLEAD\";\nexport const FETCH_LIST_BY_ID = \"FETCH_LIST_BY_ID\";\nexport const ADD_LEAD_NOTE = \"ADD_LEAD_NOTE\";\nexport const ACTION_SUCCESS = \"ACTION_SUCCESS\"; // export const START_DELETE_LEADLIST = \"START_DELETE_LEADLIST\";\n\nconst uuidv1 = require(\"uuid/v1\"); // LOGIN\n\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  };\n}\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  };\n}\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(token)\n      }\n    }; // dispatch with \"loading\" current user\n\n    return fetch(\"http://localhost:3000/api/v1/current_user\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error\n        history.push(\"/\");\n        console.log(\"current user\", data.error);\n      } else {\n        dispatch(loginUser({\n          user: data.user\n        }));\n      }\n    });\n  };\n} // ? testing\n\nexport function loadUser(loadingCb, successCb, failCb) {\n  return function (dispatch) {\n    loadingCb();\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(token)\n      }\n    }; // dispatch with \"loading\" current user\n\n    return fetch(\"http://localhost:3000/api/v1/current_user\", reqObj).then(resp => resp.json()).then(data => {\n      dispatch({\n        type: \"ACTION_SUCCESS\",\n        user: data.user\n      });\n      successCb();\n    }).catch(err => {\n      failCb();\n    });\n  };\n}\nexport function login(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(\"http://localhost:3000/api/v1/login\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.message) {\n        //handle error case\n        console.log(\"login error\", data.message);\n      } else {\n        console.log(\"fetch login\", data);\n        localStorage.token = data.token;\n        dispatch(loginUser({\n          user: data.user\n        }));\n        history.push(\"/search\");\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n      } else {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push(\"/search\");\n      }\n    });\n  };\n} ////LOGIN\n\nexport function thunkFetchCategories() {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_CATEGORIES\n    });\n    fetch(\"http://localhost:3000/api/v1/categories\").then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_CATEGORIES,\n        categories: data\n      });\n    });\n  };\n} // ? Invoked on App.js and fetches all lists in array format with leads data\n// ? Used to populate the Dashboard.js\n\nexport function thunkFetchLists(id) {\n  return function (dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n    fetch(\"http://localhost:3000/api/v1/lists/show_lists/\".concat(id)).then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: FETCH_LISTS,\n        lists: data\n      });\n    });\n  };\n} // ? Search by id of the LIST and return a list with leads and leadnote data\n// ? Used to populate LeadList.js\n\nexport function thunkFetchListById(id, history) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists/show_special/\".concat(id)).then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: FETCH_LIST_BY_ID,\n        leads: data.leads,\n        list: data.list\n      });\n      history.push(\"/leads\");\n    });\n  };\n}\nexport function thunkFetchAllListById(id) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists/show_special/\".concat(id)).then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: FETCH_LIST_BY_ID,\n        leads: data.leads,\n        list: data.list\n      });\n    });\n  };\n} //! FETCHES ONE LEADNOTE (DONT THINK I NEED THIS ANYMORE)\n// export function thunkFetchLeadNote(user_id, lead_id) {\n//   return function(dispatch) {\n//     dispatch({ type: START_FETCH_LEADNOTE });\n//     fetch(\"http://localhost:3000/leadnotes/show\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": 'application/json',\n//         \"Accept\": 'application/json'\n//       },\n//       body: JSON.stringify({\n//         user_id: user_id,\n//         lead_id: lead_id\n//       })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//       console.log(\"leadnote\", data)\n//       // dispatch({ type: FETCH_LEADNOTE, leadnote: data});\n//       // history.push('/leads')\n//     })\n//   }\n// }\n// ! FETCHES ALL LEADNOTES\n// export function thunkFetchLeadNotes(user_id) {\n//   return function(dispatch) {\n//     dispatch({ type: START_FETCH_LEADNOTES });\n//     fetch(`http://localhost:3000/leadnotes/${user_id}`)\n//     .then(res => res.json())\n//     .then(data => {\n//       console.log(\"leadnotes\", data)\n//       dispatch({ type: FETCH_LEADNOTES, leadnotes: data});\n//       // history.push('/leads')\n//     })\n//   }\n// }\n/////////////////// FETCHING LEADLIST /////////////////////////\n// export function thunkFetchListById(id, history) {\n//   return function(dispatch) {\n//     // dispatch({ type: START_FETCH_LISTS });\n//     fetch(`http://localhost:3000/api/v1/lists/show/${id}`)\n//       .then(res => res.json())\n//       .then(data => {\n//         console.log(data.leads)\n//         dispatch({ type: FETCH_LIST_BY_ID, listlead: data.leads, listid: data.id});\n//         history.push('/leads')\n//       });\n//   };\n// }\n// creating a new lead instance of the one the user saved and creating the association between list and lead\n\nexport function addLead(leadsArray, company, website, listId, newListName, userId) {\n  return function (dispatch) {\n    // const token = localStorage.token;\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        leadsArray,\n        company: company,\n        website: website\n      })\n    }).then(res => res.json()).then(data => {\n      const leadsData = data;\n\n      if (listId) {\n        data.forEach(lead => {\n          fetch(\"http://localhost:3000/api/v1/leadlists\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n              list_id: listId,\n              lead_id: lead.id\n            })\n          }).catch(err => console.log(err));\n        });\n      } else {\n        fetch(\"http://localhost:3000/api/v1/lists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          },\n          body: JSON.stringify({\n            name: newListName,\n            user_id: userId\n          })\n        }).then(res => res.json()).then(data => {\n          console.log(data);\n          dispatch({\n            type: ADD_LIST,\n            list: data\n          });\n          leadsData.forEach(lead => {\n            fetch(\"http://localhost:3000/api/v1/leadlists\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n              },\n              body: JSON.stringify({\n                list_id: data.id,\n                lead_id: lead.id\n              })\n            }).then(res => res.json()).then(data => console.log(\"leadlist from creation of new list\", data)).catch(err => console.log(err));\n          });\n        }).catch(err => console.log(err));\n      }\n    }).catch(err => console.log(err));\n  };\n} // export function addList(listName, id) {\n//   return function(dispatch) {\n//     fetch(\"http://localhost:3000/api/v1/lists\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": 'application/json',\n//         \"Accept\": 'application/json'\n//       },\n//       body: JSON.stringify({\n//         name: listName\n//       })\n//     })\n//       .then(res => res.json())\n//       .then(data => {\n//       })\n//       .catch(err => console.log(err));\n//   };\n// }\n\nexport function thunkFetchLeads(domainName, history) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"https://api.hunter.io/v2/domain-search?domain=\".concat(domainName, \"&limit=100&api_key=7ca084937e5e049696b7bb64c10366c3d077c650\")).then(res => res.json()).then(result => {\n      dispatch({\n        type: FETCH_LEADS,\n        id: uuidv1(),\n        leads: result.data\n      });\n      history.push(\"/results\");\n    });\n  };\n}\nexport function deleteList(id) {\n  return function (dispatch) {\n    dispatch({\n      type: START_DELETE_LIST\n    });\n    fetch(\"http://localhost:3000/api/v1/lists/\".concat(id), {\n      method: \"DELETE\"\n    }).then(res => res.json()).then(dispatch({\n      type: DELETE_LIST,\n      id\n    })).catch(err => console.log(err));\n  };\n} // ? delete lead from LeadList.js\n\nexport function deleteListLead(list_id, lead_id) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/leadlists\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        list_id: list_id,\n        lead_id: lead_id\n      })\n    }).then(res => res.json()).then(data => dispatch({\n      type: DELETE_LISTLEAD,\n      id: lead_id\n    })) // dispatch({type: DELETE_LISTLEAD, lead_id: lead_id, list: list_id})})\n    .catch(err => console.log(err));\n  };\n}\nexport function addLeadNote(status, nextSteps, userId, leadId, comment) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/leadnotes/create\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        status: status,\n        next_steps: nextSteps,\n        comments: comment,\n        lead_id: leadId,\n        user_id: userId\n      })\n    }).then(res => res.json()).then(console.log) // .then(data => {\n    // dispatch({type: ADD_LEAD_NOTE, leadnote: data})})\n    .catch(err => console.log(err));\n  };\n} //// ! ADD COMMENTS AS THE CALL BACK using the leadnote id received back from data\n// ! Create a reducer for this action\n// .then(data => {\n//    console.log(data)\n//    fetch(\"http://localhost:3000/comments\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": 'application/json',\n//       \"Accept\": 'application/json'\n//     },\n//     body: JSON.stringify({\n//       leadnote_id: data.id,\n//       status: comment\n\nexport function updateUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n      } else {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push(\"/search\");\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/index.js"],"names":["FETCH_CATEGORIES","START_FETCH_CATEGORIES","START_FETCH_LEADS","FETCH_LEADS","START_FETCH_LISTS","START_FETCH_LEADNOTES","FETCH_LISTS","FETCH_LEADNOTES","ADD_LIST","LOGIN_USER","LOGOUT_USER","START_DELETE_LIST","START_DELETE_LEAD","DELETE_LIST","DELETE_LISTLEAD","FETCH_LIST_BY_ID","ADD_LEAD_NOTE","ACTION_SUCCESS","uuidv1","require","loginUser","user","type","logoutUser","currentUser","history","dispatch","token","localStorage","reqObj","method","headers","Authorization","fetch","then","resp","json","data","error","push","console","log","loadUser","loadingCb","successCb","failCb","catch","err","login","formData","body","JSON","stringify","message","registerUser","thunkFetchCategories","res","categories","thunkFetchLists","id","lists","thunkFetchListById","leads","list","thunkFetchAllListById","addLead","leadsArray","company","website","listId","newListName","userId","Accept","leadsData","forEach","lead","list_id","lead_id","name","user_id","thunkFetchLeads","domainName","result","deleteList","deleteListLead","addLeadNote","status","nextSteps","leadId","comment","next_steps","comments","updateUser"],"mappings":"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","sourcesContent":["export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const START_FETCH_LEADNOTES = \"START_FETCH_LEADNOTES\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LEADNOTES = \"FETCH_LEADNOTES\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const START_DELETE_LIST = \"START_DELETE_LIST\";\nexport const START_DELETE_LEAD = \"START_DELETE_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const DELETE_LISTLEAD = \"DELETE_LISTLEAD\";\nexport const FETCH_LIST_BY_ID = \"FETCH_LIST_BY_ID\";\nexport const ADD_LEAD_NOTE = \"ADD_LEAD_NOTE\";\nexport const ACTION_SUCCESS = \"ACTION_SUCCESS\";\n// export const START_DELETE_LEADLIST = \"START_DELETE_LEADLIST\";\n\nconst uuidv1 = require(\"uuid/v1\");\n\n// LOGIN\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  };\n}\n\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  };\n}\n\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n\n    // dispatch with \"loading\" current user\n\n    return fetch(\"http://localhost:3000/api/v1/current_user\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error\n          history.push(\"/\");\n          console.log(\"current user\", data.error);\n        } else {\n          dispatch(loginUser({ user: data.user }));\n        }\n      });\n  };\n}\n\n// ? testing\nexport function loadUser(loadingCb, successCb, failCb) {\n  return function(dispatch) {\n    loadingCb();\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n\n    // dispatch with \"loading\" current user\n\n    return fetch(\"http://localhost:3000/api/v1/current_user\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        dispatch({ type: \"ACTION_SUCCESS\", user: data.user });\n        successCb();\n      })\n      .catch(err => {\n        failCb();\n      });\n  };\n}\n\nexport function login(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    };\n\n    return fetch(\"http://localhost:3000/api/v1/login\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.message) {\n          //handle error case\n          console.log(\"login error\", data.message);\n        } else {\n          console.log(\"fetch login\", data);\n          localStorage.token = data.token;\n          dispatch(loginUser({ user: data.user }));\n          history.push(\"/search\");\n        }\n      })\n      .catch(err => console.log(err));\n  };\n}\n\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    };\n\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error case\n          console.log(data.error);\n        } else {\n          localStorage.token = data.token;\n          dispatch(loginUser(data.user));\n          history.push(\"/search\");\n        }\n      });\n  };\n}\n\n////LOGIN\n\nexport function thunkFetchCategories() {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_CATEGORIES });\n\n    fetch(\"http://localhost:3000/api/v1/categories\")\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_CATEGORIES, categories: data });\n      });\n  };\n}\n\n// ? Invoked on App.js and fetches all lists in array format with leads data\n// ? Used to populate the Dashboard.js\n\nexport function thunkFetchLists(id) {\n  return function(dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n\n    fetch(`http://localhost:3000/api/v1/lists/show_lists/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        dispatch({ type: FETCH_LISTS, lists: data });\n      });\n  };\n}\n\n// ? Search by id of the LIST and return a list with leads and leadnote data\n// ? Used to populate LeadList.js\n\nexport function thunkFetchListById(id, history) {\n  return function(dispatch) {\n    fetch(`http://localhost:3000/api/v1/lists/show_special/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        dispatch({\n          type: FETCH_LIST_BY_ID,\n          leads: data.leads,\n          list: data.list\n        });\n        history.push(\"/leads\");\n      });\n  };\n}\n\nexport function thunkFetchAllListById(id) {\n  return function(dispatch) {\n    fetch(`http://localhost:3000/api/v1/lists/show_special/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        dispatch({\n          type: FETCH_LIST_BY_ID,\n          leads: data.leads,\n          list: data.list\n        });\n      });\n  };\n}\n\n//! FETCHES ONE LEADNOTE (DONT THINK I NEED THIS ANYMORE)\n// export function thunkFetchLeadNote(user_id, lead_id) {\n//   return function(dispatch) {\n//     dispatch({ type: START_FETCH_LEADNOTE });\n\n//     fetch(\"http://localhost:3000/leadnotes/show\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": 'application/json',\n//         \"Accept\": 'application/json'\n//       },\n//       body: JSON.stringify({\n//         user_id: user_id,\n//         lead_id: lead_id\n//       })\n//     })\n//     .then(res => res.json())\n//     .then(data => {\n//       console.log(\"leadnote\", data)\n//       // dispatch({ type: FETCH_LEADNOTE, leadnote: data});\n//       // history.push('/leads')\n//     })\n//   }\n// }\n\n// ! FETCHES ALL LEADNOTES\n\n// export function thunkFetchLeadNotes(user_id) {\n//   return function(dispatch) {\n//     dispatch({ type: START_FETCH_LEADNOTES });\n\n//     fetch(`http://localhost:3000/leadnotes/${user_id}`)\n//     .then(res => res.json())\n//     .then(data => {\n//       console.log(\"leadnotes\", data)\n//       dispatch({ type: FETCH_LEADNOTES, leadnotes: data});\n//       // history.push('/leads')\n//     })\n//   }\n// }\n\n/////////////////// FETCHING LEADLIST /////////////////////////\n\n// export function thunkFetchListById(id, history) {\n//   return function(dispatch) {\n//     // dispatch({ type: START_FETCH_LISTS });\n\n//     fetch(`http://localhost:3000/api/v1/lists/show/${id}`)\n//       .then(res => res.json())\n//       .then(data => {\n//         console.log(data.leads)\n//         dispatch({ type: FETCH_LIST_BY_ID, listlead: data.leads, listid: data.id});\n//         history.push('/leads')\n//       });\n//   };\n// }\n\n// creating a new lead instance of the one the user saved and creating the association between list and lead\nexport function addLead(\n  leadsArray,\n  company,\n  website,\n  listId,\n  newListName,\n  userId\n) {\n  return function(dispatch) {\n    // const token = localStorage.token;\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        leadsArray,\n        company: company,\n        website: website\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        const leadsData = data;\n        if (listId) {\n          data.forEach(lead => {\n            fetch(\"http://localhost:3000/api/v1/leadlists\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n              },\n              body: JSON.stringify({\n                list_id: listId,\n                lead_id: lead.id\n              })\n            }).catch(err => console.log(err));\n          });\n        } else {\n          fetch(\"http://localhost:3000/api/v1/lists\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n              name: newListName,\n              user_id: userId\n            })\n          })\n            .then(res => res.json())\n            .then(data => {\n              console.log(data);\n              dispatch({ type: ADD_LIST, list: data });\n              leadsData.forEach(lead => {\n                fetch(\"http://localhost:3000/api/v1/leadlists\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                    Accept: \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    list_id: data.id,\n                    lead_id: lead.id\n                  })\n                })\n                  .then(res => res.json())\n                  .then(data =>\n                    console.log(\"leadlist from creation of new list\", data)\n                  )\n                  .catch(err => console.log(err));\n              });\n            })\n            .catch(err => console.log(err));\n        }\n      })\n      .catch(err => console.log(err));\n  };\n}\n\n// export function addList(listName, id) {\n//   return function(dispatch) {\n\n//     fetch(\"http://localhost:3000/api/v1/lists\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": 'application/json',\n//         \"Accept\": 'application/json'\n//       },\n//       body: JSON.stringify({\n//         name: listName\n//       })\n//     })\n//       .then(res => res.json())\n//       .then(data => {\n\n//       })\n//       .catch(err => console.log(err));\n//   };\n// }\n\nexport function thunkFetchLeads(domainName, history) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\n      `https://api.hunter.io/v2/domain-search?domain=${domainName}&limit=100&api_key=7ca084937e5e049696b7bb64c10366c3d077c650`\n    )\n      .then(res => res.json())\n      .then(result => {\n        dispatch({ type: FETCH_LEADS, id: uuidv1(), leads: result.data });\n        history.push(\"/results\");\n      });\n  };\n}\n\nexport function deleteList(id) {\n  return function(dispatch) {\n    dispatch({ type: START_DELETE_LIST });\n\n    fetch(`http://localhost:3000/api/v1/lists/${id}`, {\n      method: \"DELETE\"\n    })\n      .then(res => res.json())\n      .then(dispatch({ type: DELETE_LIST, id }))\n      .catch(err => console.log(err));\n  };\n}\n\n// ? delete lead from LeadList.js\nexport function deleteListLead(list_id, lead_id) {\n  return function(dispatch) {\n    fetch(`http://localhost:3000/api/v1/leadlists`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        list_id: list_id,\n        lead_id: lead_id\n      })\n    })\n      .then(res => res.json())\n      .then(data => dispatch({ type: DELETE_LISTLEAD, id: lead_id }))\n      // dispatch({type: DELETE_LISTLEAD, lead_id: lead_id, list: list_id})})\n      .catch(err => console.log(err));\n  };\n}\n\nexport function addLeadNote(status, nextSteps, userId, leadId, comment) {\n  return function(dispatch) {\n    fetch(\"http://localhost:3000/leadnotes/create\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        status: status,\n        next_steps: nextSteps,\n        comments: comment,\n        lead_id: leadId,\n        user_id: userId\n      })\n    })\n      .then(res => res.json())\n      .then(console.log)\n      // .then(data => {\n      // dispatch({type: ADD_LEAD_NOTE, leadnote: data})})\n      .catch(err => console.log(err));\n  };\n}\n//// ! ADD COMMENTS AS THE CALL BACK using the leadnote id received back from data\n// ! Create a reducer for this action\n\n// .then(data => {\n//    console.log(data)\n//    fetch(\"http://localhost:3000/comments\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": 'application/json',\n//       \"Accept\": 'application/json'\n//     },\n//     body: JSON.stringify({\n//       leadnote_id: data.id,\n//       status: comment\n\nexport function updateUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    };\n\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error case\n          console.log(data.error);\n        } else {\n          localStorage.token = data.token;\n          dispatch(loginUser(data.user));\n          history.push(\"/search\");\n        }\n      });\n  };\n}"]},"metadata":{},"sourceType":"module"}