{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _pageResolver2 = require('./page-resolver');\n\nvar _pageResolver3 = _interopRequireDefault(_pageResolver2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint react/prop-types: 0 */\n\n/* eslint camelcase: 0 */\n\n\nexports.default = function (WrappedComponent) {\n  return function (_pageResolver) {\n    _inherits(PaginationHandler, _pageResolver);\n\n    function PaginationHandler(props) {\n      _classCallCheck(this, PaginationHandler);\n\n      var _this = _possibleConstructorReturn(this, (PaginationHandler.__proto__ || Object.getPrototypeOf(PaginationHandler)).call(this, props));\n\n      _this.handleChangePage = _this.handleChangePage.bind(_this);\n      _this.handleChangeSizePerPage = _this.handleChangeSizePerPage.bind(_this);\n      _this.state = _this.initialState();\n      return _this;\n    }\n\n    _createClass(PaginationHandler, [{\n      key: 'UNSAFE_componentWillReceiveProps',\n      value: function UNSAFE_componentWillReceiveProps(nextProps) {\n        var dataSize = nextProps.dataSize,\n            currSizePerPage = nextProps.currSizePerPage;\n\n        if (currSizePerPage !== this.props.currSizePerPage || dataSize !== this.props.dataSize) {\n          var totalPages = this.calculateTotalPage(currSizePerPage, dataSize);\n          var lastPage = this.calculateLastPage(totalPages);\n          this.setState({\n            totalPages: totalPages,\n            lastPage: lastPage\n          });\n        }\n      }\n    }, {\n      key: 'handleChangeSizePerPage',\n      value: function handleChangeSizePerPage(sizePerPage) {\n        var _props = this.props,\n            currSizePerPage = _props.currSizePerPage,\n            onSizePerPageChange = _props.onSizePerPageChange;\n        var selectedSize = typeof sizePerPage === 'string' ? parseInt(sizePerPage, 10) : sizePerPage;\n        var currPage = this.props.currPage;\n\n        if (selectedSize !== currSizePerPage) {\n          var newTotalPages = this.calculateTotalPage(selectedSize);\n          var newLastPage = this.calculateLastPage(newTotalPages);\n          if (currPage > newLastPage) currPage = newLastPage;\n          onSizePerPageChange(selectedSize, currPage);\n        }\n      }\n    }, {\n      key: 'handleChangePage',\n      value: function handleChangePage(newPage) {\n        var page = void 0;\n        var _props2 = this.props,\n            currPage = _props2.currPage,\n            pageStartIndex = _props2.pageStartIndex,\n            prePageText = _props2.prePageText,\n            nextPageText = _props2.nextPageText,\n            lastPageText = _props2.lastPageText,\n            firstPageText = _props2.firstPageText,\n            onPageChange = _props2.onPageChange;\n        var lastPage = this.state.lastPage;\n\n        if (newPage === prePageText) {\n          page = this.backToPrevPage();\n        } else if (newPage === nextPageText) {\n          page = currPage + 1 > lastPage ? lastPage : currPage + 1;\n        } else if (newPage === lastPageText) {\n          page = lastPage;\n        } else if (newPage === firstPageText) {\n          page = pageStartIndex;\n        } else {\n          page = parseInt(newPage, 10);\n        }\n\n        if (page !== currPage) {\n          onPageChange(page);\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {\n          lastPage: this.state.lastPage,\n          totalPages: this.state.totalPages,\n          onPageChange: this.handleChangePage,\n          onSizePerPageChange: this.handleChangeSizePerPage\n        }));\n      }\n    }]);\n\n    return PaginationHandler;\n  }((0, _pageResolver3.default)(_react.Component));\n};","map":null,"metadata":{},"sourceType":"script"}