{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _const = require('./const');\n\nvar _const2 = _interopRequireDefault(_const);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint no-mixed-operators: 0 */\n\n\nexports.default = function (ExtendBase) {\n  return function (_ExtendBase) {\n    _inherits(PageResolver, _ExtendBase);\n\n    function PageResolver() {\n      _classCallCheck(this, PageResolver);\n\n      return _possibleConstructorReturn(this, (PageResolver.__proto__ || Object.getPrototypeOf(PageResolver)).apply(this, arguments));\n    }\n\n    _createClass(PageResolver, [{\n      key: 'backToPrevPage',\n      value: function backToPrevPage() {\n        var _props = this.props,\n            currPage = _props.currPage,\n            pageStartIndex = _props.pageStartIndex;\n        return currPage - 1 < pageStartIndex ? pageStartIndex : currPage - 1;\n      }\n    }, {\n      key: 'initialState',\n      value: function initialState() {\n        var totalPages = this.calculateTotalPage();\n        var lastPage = this.calculateLastPage(totalPages);\n        return {\n          totalPages: totalPages,\n          lastPage: lastPage\n        };\n      }\n    }, {\n      key: 'calculateTotalPage',\n      value: function calculateTotalPage() {\n        var sizePerPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.currSizePerPage;\n        var dataSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.dataSize;\n        return Math.ceil(dataSize / sizePerPage);\n      }\n    }, {\n      key: 'calculateLastPage',\n      value: function calculateLastPage(totalPages) {\n        var pageStartIndex = this.props.pageStartIndex;\n        return pageStartIndex + totalPages - 1;\n      }\n    }, {\n      key: 'calculateFromTo',\n      value: function calculateFromTo() {\n        var _props2 = this.props,\n            dataSize = _props2.dataSize,\n            currPage = _props2.currPage,\n            currSizePerPage = _props2.currSizePerPage,\n            pageStartIndex = _props2.pageStartIndex;\n        var offset = Math.abs(_const2.default.PAGE_START_INDEX - pageStartIndex);\n        var from = (currPage - pageStartIndex) * currSizePerPage;\n        from = dataSize === 0 ? 0 : from + 1;\n        var to = Math.min(currSizePerPage * (currPage + offset), dataSize);\n        if (to > dataSize) to = dataSize;\n        return [from, to];\n      }\n    }, {\n      key: 'calculatePages',\n      value: function calculatePages(totalPages, lastPage) {\n        var _props3 = this.props,\n            currPage = _props3.currPage,\n            paginationSize = _props3.paginationSize,\n            pageStartIndex = _props3.pageStartIndex,\n            withFirstAndLast = _props3.withFirstAndLast,\n            firstPageText = _props3.firstPageText,\n            prePageText = _props3.prePageText,\n            nextPageText = _props3.nextPageText,\n            lastPageText = _props3.lastPageText,\n            alwaysShowAllBtns = _props3.alwaysShowAllBtns;\n        var pages = [];\n        var endPage = totalPages;\n        if (endPage <= 0) return [];\n        var startPage = Math.max(currPage - Math.floor(paginationSize / 2), pageStartIndex);\n        endPage = startPage + paginationSize - 1;\n\n        if (endPage > lastPage) {\n          endPage = lastPage;\n          startPage = endPage - paginationSize + 1;\n        }\n\n        if (alwaysShowAllBtns) {\n          if (withFirstAndLast) {\n            pages = [firstPageText, prePageText];\n          } else {\n            pages = [prePageText];\n          }\n        }\n\n        if (startPage !== pageStartIndex && totalPages > paginationSize && withFirstAndLast && pages.length === 0) {\n          pages = [firstPageText, prePageText];\n        } else if (totalPages > 1 && pages.length === 0) {\n          pages = [prePageText];\n        }\n\n        for (var i = startPage; i <= endPage; i += 1) {\n          if (i >= pageStartIndex) pages.push(i);\n        }\n\n        if (alwaysShowAllBtns || endPage <= lastPage && pages.length > 1) {\n          pages.push(nextPageText);\n        }\n\n        if (endPage !== lastPage && withFirstAndLast || withFirstAndLast && alwaysShowAllBtns) {\n          pages.push(lastPageText);\n        } // if ((endPage <= lastPage && pages.length > 1) || alwaysShowAllBtns) {\n        //   pages.push(nextPageText);\n        // }\n        // if (endPage !== lastPage && withFirstAndLast) {\n        //   pages.push(lastPageText);\n        // }\n\n\n        return pages;\n      }\n    }, {\n      key: 'calculatePageStatus',\n      value: function calculatePageStatus() {\n        var _this2 = this;\n\n        var pages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var lastPage = arguments[1];\n        var _props4 = this.props,\n            currPage = _props4.currPage,\n            pageStartIndex = _props4.pageStartIndex,\n            firstPageText = _props4.firstPageText,\n            prePageText = _props4.prePageText,\n            nextPageText = _props4.nextPageText,\n            lastPageText = _props4.lastPageText,\n            alwaysShowAllBtns = _props4.alwaysShowAllBtns;\n\n        var isStart = function isStart(page) {\n          return currPage === pageStartIndex && (page === firstPageText || page === prePageText);\n        };\n\n        var isEnd = function isEnd(page) {\n          return currPage === lastPage && (page === nextPageText || page === lastPageText);\n        };\n\n        return pages.filter(function (page) {\n          if (alwaysShowAllBtns) {\n            return true;\n          }\n\n          return !(isStart(page) || isEnd(page));\n        }).map(function (page) {\n          var title = void 0;\n          var active = page === currPage;\n          var disabled = isStart(page) || isEnd(page);\n\n          if (page === nextPageText) {\n            title = _this2.props.nextPageTitle;\n          } else if (page === prePageText) {\n            title = _this2.props.prePageTitle;\n          } else if (page === firstPageText) {\n            title = _this2.props.firstPageTitle;\n          } else if (page === lastPageText) {\n            title = _this2.props.lastPageTitle;\n          } else {\n            title = '' + page;\n          }\n\n          return {\n            page: page,\n            active: active,\n            disabled: disabled,\n            title: title\n          };\n        });\n      }\n    }, {\n      key: 'calculateSizePerPageStatus',\n      value: function calculateSizePerPageStatus() {\n        var sizePerPageList = this.props.sizePerPageList;\n        return sizePerPageList.map(function (_sizePerPage) {\n          var pageText = typeof _sizePerPage.text !== 'undefined' ? _sizePerPage.text : _sizePerPage;\n          var pageNumber = typeof _sizePerPage.value !== 'undefined' ? _sizePerPage.value : _sizePerPage;\n          return {\n            text: '' + pageText,\n            page: pageNumber\n          };\n        });\n      }\n    }]);\n\n    return PageResolver;\n  }(ExtendBase);\n};","map":null,"metadata":{},"sourceType":"script"}