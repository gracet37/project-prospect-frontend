{"ast":null,"code":"export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const START_FETCH_LEADNOTES = \"START_FETCH_LEADNOTES\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LEADNOTES = \"FETCH_LEADNOTES\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const START_DELETE_LIST = \"START_DELETE_LIST\";\nexport const START_DELETE_LEAD = \"START_DELETE_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const DELETE_LISTLEAD = \"DELETE_LISTLEAD\";\nexport const FETCH_LIST_BY_ID = \"FETCH_LIST_BY_ID\";\n\nconst uuidv1 = require('uuid/v1'); // LOGIN\n\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  };\n}\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  };\n}\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(token)\n      }\n    }; // dispatch with \"loading\" current user\n\n    return fetch('http://localhost:3000/api/v1/current_user', reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error\n        history.push('/');\n        console.log(\"current user\", data.error);\n      } else {\n        dispatch(loginUser({\n          user: data.user\n        })); // dispatch(thunkFetchLists(data.user.id))\n      }\n    });\n  };\n}\nexport function login(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch('http://localhost:3000/api/v1/login', reqObj).then(resp => resp.json()).then(data => {\n      if (data.message) {\n        //handle error case\n        console.log(\"login error\", data.message);\n      } else {\n        console.log(\"fetch login\", data);\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push('/search');\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch('http://localhost:3000/api/v1/auth', reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n      } else {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push('/search');\n      }\n    });\n  };\n} ////LOGIN\n\nexport function thunkFetchCategories() {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_CATEGORIES\n    });\n    fetch(\"http://localhost:3000/api/v1/categories\").then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_CATEGORIES,\n        categories: data\n      });\n    });\n  };\n} // export function thunkFetchLists(id) {\n//   return function(dispatch) {\n//     dispatch({ type: START_FETCH_LISTS });\n//     fetch(`http://localhost:3000/users/${id}`)\n//       .then(res => res.json())\n//       .then(data => {\n//         console.log(data)\n//         dispatch({ type: FETCH_LISTS, lists: data.lists});\n//       }); \n//   };\n// }\n\nexport function thunkFetchLists(id) {\n  return function (dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n    fetch(\"http://localhost:3000/api/v1/lists/\".concat(id)) // method: \"POST\",\n    // headers: {\n    //   'Content-Type': 'application/json',\n    //   \"Accept\": 'application/json'\n    // },\n    // body: JSON.stringify({\n    //   user_id: id\n    // })\n    .then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: FETCH_LISTS,\n        lists: data\n      });\n    });\n  };\n}\nexport function thunkFetchListById(id, history) {\n  return function (dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n    fetch(\"http://localhost:3000/api/v1/lists/show/\".concat(id)).then(res => res.json()).then(data => {\n      console.log(data.leads);\n      dispatch({\n        type: FETCH_LIST_BY_ID,\n        listlead: data.leads,\n        listid: data.id\n      });\n      history.push('/leads');\n    });\n  };\n}\nexport function thunkFetchLeadNotes(user_id, lead_id) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADNOTES\n    });\n    fetch(\"http://localhost:3000/leadnotes/\").then(res => res.json()).then(data => {\n      console.log(\"leadnote\", data);\n      dispatch({\n        type: FETCH_LEADNOTE,\n        leadnotes: data\n      }); // history.push('/leads')\n    });\n  };\n} /////////////////// FETCHING LEADLIST /////////////////////////\n// export function thunkFetchListById(id, history) {\n//   return function(dispatch) {\n//     // dispatch({ type: START_FETCH_LISTS });\n//     fetch(`http://localhost:3000/api/v1/lists/show/${id}`)\n//       .then(res => res.json())\n//       .then(data => {\n//         console.log(data.leads)\n//         dispatch({ type: FETCH_LIST_BY_ID, listlead: data.leads, listid: data.id});\n//         history.push('/leads')\n//       }); \n//   };\n// }\n// creating a new lead instance of the one the user saved and creating the association between list and lead\n\nexport function addLead(leadsArray, company, website, listId, newListName, userId) {\n  return function (dispatch) {\n    // const token = localStorage.token;\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        leadsArray,\n        company: company,\n        website: website\n      })\n    }).then(res => res.json()) // .then(console.log)\n    .then(data => {\n      // console.log(data)\n      const leadsData = data; // console.log(leadsData)\n\n      if (listId) {\n        data.forEach(lead => {\n          fetch(\"http://localhost:3000/api/v1/leadlists\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": 'application/json',\n              \"Accept\": 'application/json'\n            },\n            body: JSON.stringify({\n              list_id: listId,\n              lead_id: lead.id\n            })\n          }).catch(err => console.log(err));\n        });\n      } else {\n        fetch(\"http://localhost:3000/api/v1/lists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n          },\n          body: JSON.stringify({\n            name: newListName,\n            user_id: userId\n          })\n        }).then(res => res.json()) // .then(console.log(leadsData))\n        .then(data => {\n          dispatch({\n            type: ADD_LIST,\n            list: data\n          });\n          console.log(\"LIST\", data);\n          console.log(leadsData);\n          leadsData.forEach(lead => {\n            fetch(\"http://localhost:3000/api/v1/leadlists\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": 'application/json',\n                \"Accept\": 'application/json'\n              },\n              body: JSON.stringify({\n                list_id: data.id,\n                lead_id: lead.id\n              })\n            }).then(res => res.json()).then(data => console.log(\"leadlist from creation of new list\", data)).catch(err => console.log(err));\n          });\n        }).catch(err => console.log(err));\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function addList(listName, id) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    }).then(res => res.json()).then(data => {}).catch(err => console.log(err));\n  };\n}\nexport function thunkFetchLeads(domainName, history) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"https://api.hunter.io/v2/domain-search?domain=\".concat(domainName, \"&limit=100&api_key=7ca084937e5e049696b7bb64c10366c3d077c650\")).then(res => res.json()).then(result => {\n      dispatch({\n        type: FETCH_LEADS,\n        id: uuidv1(),\n        leads: result.data\n      });\n      history.push('/results');\n    });\n  };\n}\nexport function deleteList(id) {\n  return function (dispatch) {\n    dispatch({\n      type: START_DELETE_LIST\n    });\n    fetch(\"http://localhost:3000/api/v1/lists/\".concat(id), {\n      method: 'DELETE'\n    }).then(res => res.json()).then(dispatch({\n      type: DELETE_LIST,\n      id\n    })).catch(err => console.log(err));\n  };\n}\nexport function deleteListLead(list_id, lead_id) {\n  return function (dispatch) {\n    dispatch({\n      type: START_DELETE_LEAD\n    });\n    fetch(\"http://localhost:3000/api/v1/leadlists\", {\n      method: 'DELETE',\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        list_id: list_id,\n        lead_id: lead_id\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: DELETE_LISTLEAD,\n        lead_id: lead_id,\n        list: list_id\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function addLeadNote(status, nextSteps, userId, leadId, comment) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/leadnotes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        status: status,\n        next_steps: nextSteps,\n        lead_id: leadId,\n        user_id: userId\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      fetch(\"http://localhost:3000/comments\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": 'application/json',\n          \"Accept\": 'application/json'\n        },\n        body: JSON.stringify({\n          leadnote_id: data.id,\n          status: comment\n        })\n      });\n    }).catch(err => console.log(err));\n  };\n} //// ! ADD COMMENTS AS THE CALL BACK using the leadnote id received back from data\n// ! Create a reducer for this action","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/index.js"],"names":["FETCH_CATEGORIES","START_FETCH_CATEGORIES","START_FETCH_LEADS","FETCH_LEADS","START_FETCH_LISTS","START_FETCH_LEADNOTES","FETCH_LISTS","FETCH_LEADNOTES","ADD_LIST","LOGIN_USER","LOGOUT_USER","START_DELETE_LIST","START_DELETE_LEAD","DELETE_LIST","DELETE_LISTLEAD","FETCH_LIST_BY_ID","uuidv1","require","loginUser","user","type","logoutUser","currentUser","history","dispatch","token","localStorage","reqObj","method","headers","Authorization","fetch","then","resp","json","data","error","push","console","log","login","formData","body","JSON","stringify","message","catch","err","registerUser","thunkFetchCategories","res","categories","thunkFetchLists","id","lists","thunkFetchListById","leads","listlead","listid","thunkFetchLeadNotes","user_id","lead_id","FETCH_LEADNOTE","leadnotes","addLead","leadsArray","company","website","listId","newListName","userId","leadsData","forEach","lead","list_id","name","list","addList","listName","thunkFetchLeads","domainName","result","deleteList","deleteListLead","addLeadNote","status","nextSteps","leadId","comment","next_steps","leadnote_id"],"mappings":"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","sourcesContent":["export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const START_FETCH_LEADNOTES = \"START_FETCH_LEADNOTES\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LEADNOTES = \"FETCH_LEADNOTES\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\nexport const START_DELETE_LIST = \"START_DELETE_LIST\";\nexport const START_DELETE_LEAD = \"START_DELETE_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const DELETE_LISTLEAD = \"DELETE_LISTLEAD\";\nexport const FETCH_LIST_BY_ID = \"FETCH_LIST_BY_ID\";\n\nconst uuidv1 = require('uuid/v1')\n\n// LOGIN\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  }\n}\n\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  }\n}\n\nexport function currentUser(history) {\n  return (dispatch) => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n// dispatch with \"loading\" current user\n\n    return fetch('http://localhost:3000/api/v1/current_user', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error\n          history.push('/')\n          console.log(\"current user\", data.error)\n        } else {\n          dispatch(loginUser({ user: data.user }))\n          // dispatch(thunkFetchLists(data.user.id))\n        }\n      })\n  }\n}\n\nexport function login(formData, history) {\n  return (dispatch) => {\n    const reqObj = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(formData)\n    }\n\n    return fetch('http://localhost:3000/api/v1/login', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.message){\n          //handle error case\n          console.log(\"login error\", data.message)\n        } else {\n          console.log(\"fetch login\", data)\n          localStorage.token = data.token\n          dispatch(loginUser(data.user))\n          history.push('/search')\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport function registerUser(formData, history) {\n  return (dispatch) => {\n    const reqObj = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(formData)\n    }\n\n    return fetch('http://localhost:3000/api/v1/auth', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error){\n          //handle error case\n          console.log(data.error)\n        } else {\n          localStorage.token = data.token\n          dispatch(loginUser( data.user ))\n          history.push('/search')\n        }\n      })\n  }\n}\n\n////LOGIN\n\nexport function thunkFetchCategories() {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_CATEGORIES });\n\n    fetch(\"http://localhost:3000/api/v1/categories\")\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_CATEGORIES, categories: data });\n      }); \n  };\n}\n\n// export function thunkFetchLists(id) {\n//   return function(dispatch) {\n//     dispatch({ type: START_FETCH_LISTS });\n\n//     fetch(`http://localhost:3000/users/${id}`)\n//       .then(res => res.json())\n//       .then(data => {\n//         console.log(data)\n//         dispatch({ type: FETCH_LISTS, lists: data.lists});\n//       }); \n//   };\n// }\n\nexport function thunkFetchLists(id) {\n  return function(dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n\n    fetch(`http://localhost:3000/api/v1/lists/${id}`)\n      // method: \"POST\",\n      // headers: {\n      //   'Content-Type': 'application/json',\n      //   \"Accept\": 'application/json'\n      // },\n      // body: JSON.stringify({\n      //   user_id: id\n      // })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        dispatch({ type: FETCH_LISTS, lists: data});\n      }); \n  };\n}\n\nexport function thunkFetchListById(id, history) {\n  return function(dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n\n    fetch(`http://localhost:3000/api/v1/lists/show/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data.leads)\n        dispatch({ type: FETCH_LIST_BY_ID, listlead: data.leads, listid: data.id});\n        history.push('/leads')\n      }); \n  };\n}\n\nexport function thunkFetchLeadNotes(user_id, lead_id) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADNOTES });\n\n    fetch(\"http://localhost:3000/leadnotes/\")\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"leadnote\", data)\n        dispatch({ type: FETCH_LEADNOTE, leadnotes: data});\n        // history.push('/leads')\n      }); \n  };\n}\n\n/////////////////// FETCHING LEADLIST /////////////////////////\n\n// export function thunkFetchListById(id, history) {\n//   return function(dispatch) {\n//     // dispatch({ type: START_FETCH_LISTS });\n\n//     fetch(`http://localhost:3000/api/v1/lists/show/${id}`)\n//       .then(res => res.json())\n//       .then(data => {\n//         console.log(data.leads)\n//         dispatch({ type: FETCH_LIST_BY_ID, listlead: data.leads, listid: data.id});\n//         history.push('/leads')\n//       }); \n//   };\n// }\n\n\n\n\n// creating a new lead instance of the one the user saved and creating the association between list and lead\nexport function addLead(leadsArray, company, website, listId, newListName, userId) {\n  return function(dispatch) {\n    // const token = localStorage.token;\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        leadsArray,\n        company: company,\n        website: website\n      })\n    })\n      .then(res => res.json())\n      // .then(console.log)\n      .then(data => {\n        // console.log(data)\n        const leadsData = data\n        // console.log(leadsData)\n        if (listId) { \n        data.forEach(lead => {\n        fetch(\"http://localhost:3000/api/v1/leadlists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n          },\n          body: JSON.stringify({\n            list_id: listId,\n            lead_id: lead.id\n          })\n        }).catch(err => console.log(err));\n      })\n      } else { \n        fetch(\"http://localhost:3000/api/v1/lists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n          },\n          body: JSON.stringify({\n            name: newListName, \n            user_id: userId\n          })\n        })\n        .then(res => res.json())\n        // .then(console.log(leadsData))\n        .then(data => {\n          dispatch({ type: ADD_LIST, list: data});\n          console.log(\"LIST\", data)\n          console.log(leadsData)\n          leadsData.forEach(lead => {\n          fetch(\"http://localhost:3000/api/v1/leadlists\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": 'application/json',\n              \"Accept\": 'application/json'\n            },\n            body: JSON.stringify({\n              list_id: data.id,\n              lead_id: lead.id\n            })\n          }).then(res => res.json())\n          .then(data => console.log(\"leadlist from creation of new list\", data))\n          .catch(err => console.log(err));\n        })\n      }).catch(err => console.log(err));\n      }\n    })\n    .catch(err => console.log(err)); \n  };\n}\n\nexport function addList(listName, id) {\n  return function(dispatch) {\n\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n         \n      })\n      .catch(err => console.log(err)); \n  };\n}\n\nexport function thunkFetchLeads(domainName, history) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\n      `https://api.hunter.io/v2/domain-search?domain=${domainName}&limit=100&api_key=7ca084937e5e049696b7bb64c10366c3d077c650`\n    )\n      .then(res => res.json())\n      .then(result => {\n        dispatch({ type: FETCH_LEADS, id: uuidv1(), leads: result.data })\n        history.push('/results')\n      });\n\n  };\n}\n\nexport function deleteList(id) {\n  return function(dispatch) {\n    dispatch({type: START_DELETE_LIST})\n\n  fetch(`http://localhost:3000/api/v1/lists/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json())\n  .then(dispatch({type: DELETE_LIST, id}))\n  .catch(err => console.log(err))\n  }\n}\n\n\nexport function deleteListLead(list_id, lead_id) {\n  return function(dispatch) {\n    dispatch({type: START_DELETE_LEAD})\n\n  fetch(`http://localhost:3000/api/v1/leadlists`, {\n    method: 'DELETE',\n    headers: {\n      \"Content-Type\": 'application/json',\n      \"Accept\": 'application/json'\n    },\n    body: JSON.stringify({\n      list_id: list_id,\n      lead_id: lead_id\n    })\n  })\n  .then(res => res.json())\n  .then(data => {\n    dispatch({type: DELETE_LISTLEAD, lead_id: lead_id, list: list_id})})\n  .catch(err => console.log(err))\n  }\n}\n\nexport function addLeadNote(status, nextSteps, userId, leadId, comment) {\n  return function(dispatch) {\n\n    fetch(\"http://localhost:3000/leadnotes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        status: status,\n        next_steps: nextSteps,\n        lead_id: leadId,\n        user_id: userId\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n         console.log(data)\n         fetch(\"http://localhost:3000/comments\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n          },\n          body: JSON.stringify({\n            leadnote_id: data.id,\n            status: comment\n          })\n        })\n      })\n      .catch(err => console.log(err)); \n  };\n}\n//// ! ADD COMMENTS AS THE CALL BACK using the leadnote id received back from data\n// ! Create a reducer for this action \n\n"]},"metadata":{},"sourceType":"module"}