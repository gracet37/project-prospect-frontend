{"ast":null,"code":"var hasExcape = /~/;\nvar escapeMatcher = /~[01]/g;\n\nfunction escapeReplacer(m) {\n  switch (m) {\n    case '~1':\n      return '/';\n\n    case '~0':\n      return '~';\n  }\n\n  throw new Error('Invalid tilde escape: ' + m);\n}\n\nfunction untilde(str) {\n  if (!hasExcape.test(str)) return str;\n  return str.replace(escapeMatcher, escapeReplacer);\n}\n\nfunction setter(obj, pointer, value) {\n  var part;\n  var hasNextPart;\n\n  for (var p = 1, len = pointer.length; p < len;) {\n    part = untilde(pointer[p++]);\n    hasNextPart = len > p;\n\n    if (typeof obj[part] === 'undefined') {\n      // support setting of /-\n      if (Array.isArray(obj) && part === '-') {\n        part = obj.length;\n      } // support nested objects/array when setting values\n\n\n      if (hasNextPart) {\n        if (pointer[p] !== '' && pointer[p] < Infinity || pointer[p] === '-') obj[part] = [];else obj[part] = {};\n      }\n    }\n\n    if (!hasNextPart) break;\n    obj = obj[part];\n  }\n\n  var oldValue = obj[part];\n  if (value === undefined) delete obj[part];else obj[part] = value;\n  return oldValue;\n}\n\nfunction compilePointer(pointer) {\n  if (typeof pointer === 'string') {\n    pointer = pointer.split('/');\n    if (pointer[0] === '') return pointer;\n    throw new Error('Invalid JSON pointer.');\n  } else if (Array.isArray(pointer)) {\n    return pointer;\n  }\n\n  throw new Error('Invalid JSON pointer.');\n}\n\nfunction get(obj, pointer) {\n  if (typeof obj !== 'object') throw new Error('Invalid input object.');\n  pointer = compilePointer(pointer);\n  var len = pointer.length;\n  if (len === 1) return obj;\n\n  for (var p = 1; p < len;) {\n    obj = obj[untilde(pointer[p++])];\n    if (len === p) return obj;\n    if (typeof obj !== 'object') return undefined;\n  }\n}\n\nfunction set(obj, pointer, value) {\n  if (typeof obj !== 'object') throw new Error('Invalid input object.');\n  pointer = compilePointer(pointer);\n  if (pointer.length === 0) throw new Error('Invalid JSON pointer for set.');\n  return setter(obj, pointer, value);\n}\n\nfunction compile(pointer) {\n  var compiled = compilePointer(pointer);\n  return {\n    get: function (object) {\n      return get(object, compiled);\n    },\n    set: function (object, value) {\n      return set(object, compiled, value);\n    }\n  };\n}\n\nexports.get = get;\nexports.set = set;\nexports.compile = compile;","map":null,"metadata":{},"sourceType":"script"}