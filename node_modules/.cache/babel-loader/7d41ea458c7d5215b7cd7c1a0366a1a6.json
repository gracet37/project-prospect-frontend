{"ast":null,"code":"var _jsxFileName = \"/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/components/SearchResultsTable.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { connect } from 'react-redux';\nimport { addList, addLead } from \"../actions\";\nimport Navbar from \"./Navbar\";\nimport EnhancedTable from \"./EnhancedTable\";\n\nclass DataTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      listId: \"\",\n      leadSelection: \"\",\n      company: \"\",\n      website: \"\",\n      newListName: \"\",\n      leadsArray: [],\n      rows: [],\n      isLoading: true\n    };\n\n    this.createData = (name, last_name, email, position, company, confidence) => {\n      return {\n        name,\n        last_name,\n        email,\n        position,\n        company,\n        confidence\n      };\n    };\n\n    this.createRowData = () => {\n      let array = [];\n      this.props.leads.emails.forEach(lead => {\n        let newRow = this.createData(lead.first_name, lead.last_name, lead.value, lead.position, this.props.leads.organization, lead.confidence);\n        array.push(newRow);\n      });\n      this.setState({\n        rows: array\n      });\n      this.setState({\n        isLoading: false\n      });\n    };\n\n    this.handleSubmit = () => {\n      const _this$state = this.state,\n            leadsArray = _this$state.leadsArray,\n            company = _this$state.company,\n            website = _this$state.website,\n            listId = _this$state.listId,\n            newListName = _this$state.newListName;\n      console.log(\"SUBMIT\", this.state);\n      const userId = this.props.auth.user.id;\n      this.props.addLead(leadsArray, company, website, listId, newListName, userId);\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.props.leads);\n    const array = this.props.leads;\n    this.createRowData();\n    this.setState({\n      company: array.organization,\n      website: array.domain\n    });\n  }\n\n  // handleLeadClick = (lead, checked) => {\n  //   console.log(lead);\n  //   console.log(checked);\n  //   if (checked) {\n  //     this.props.listWithLeadNotes.forEach(l => {\n  //       console.log(\"what is l\", l)\n  //       if (l.lead.email !== lead.value) {\n  //         this.setState({ leadsArray: [...this.state.leadsArray, lead] });\n  //       } else {\n  //         return (\n  //           null\n  //         )\n  //       }\n  //     })\n  //   } else {\n  //     const newArray = this.state.leadsArray.filter(\n  //       l => l.value !== lead.value\n  //     );\n  //     this.setState({ leadsArray: newArray });\n  //   }\n  // };\n  render() {\n    let lists = this.props.lists;\n    let listArray = lists.map(list => {\n      return {\n        key: list.id,\n        text: list.name,\n        value: list.id\n      };\n    });\n    console.log(this.state);\n\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Loading\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(EnhancedTable, {\n      addLead: this.props.addLead,\n      company: this.state.company,\n      website: this.state.website,\n      rows: this.state.rows,\n      listArray: listArray,\n      userId: this.props.auth.user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    leads: state.leads,\n    lists: state.lists,\n    auth: state.auth,\n    listWithLeadNotes: state.listWithLeadNotes\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // addList: (listName, id) => {\n    //   dispatch(addList(listName, id));\n    // },\n    addLead: (leadsArray, company, website, listId, newListName, userId) => {\n      dispatch(addLead(leadsArray, company, website, listId, newListName, userId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataTable); // function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n// const headCells = [\n//   { id: 'name', numeric: false, disablePadding: true, label: 'First Name' },\n//   { id: 'last_name', numeric: false, disablePadding: false, label: 'Last Name' },\n//   { id: 'email', numeric: false, disablePadding: false, label: 'Email' },\n//   { id: 'position', numeric: false, disablePadding: false, label: 'Position' },\n//   { id: 'company', numeric: false, disablePadding: false, label: 'Company' },\n//   { id: 'confidence', numeric: true, disablePadding: false, label: 'Confidence' },\n// ];\n// function EnhancedTableHead(props) {\n//   const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n//   const createSortHandler = property => event => {\n//     onRequestSort(event, property);\n//   };\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{ 'aria-label': 'select all leads' }}\n//           />\n//         </TableCell>\n//         {headCells.map(headCell => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'default'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={order}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <span className={classes.visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </span>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n// EnhancedTableHead.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// const useToolbarStyles = makeStyles(theme => ({\n//   root: {\n//     paddingLeft: theme.spacing(2),\n//     paddingRight: theme.spacing(1),\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// }));\n// const EnhancedTableToolbar = props => {\n//   const classes = useToolbarStyles();\n//   const { numSelected } = props;\n//   return (\n//     <Toolbar\n//       className={clsx(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Nutrition\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n// };\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing(3),\n//   },\n//   paper: {\n//     width: '100%',\n//     marginBottom: theme.spacing(2),\n//   },\n//   table: {\n//     minWidth: 750,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n//   visuallyHidden: {\n//     border: 0,\n//     clip: 'rect(0 0 0 0)',\n//     height: 1,\n//     margin: -1,\n//     overflow: 'hidden',\n//     padding: 0,\n//     position: 'absolute',\n//     top: 20,\n//     width: 1,\n//   },\n// }));\n// function EnhancedTable(props) {\n//   const classes = useStyles();\n//   const [order, setOrder] = React.useState('asc');\n//   const [orderBy, setOrderBy] = React.useState('last_name');\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(10);\n//   const handleRequestSort = (event, property) => {\n//     const isDesc = orderBy === property && order === 'desc';\n//     setOrder(isDesc ? 'asc' : 'desc');\n//     setOrderBy(property);\n//   };\n//   const handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       const newSelecteds = props.rows.map(n => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = event => {\n//     setRowsPerPage(+event.target.value);\n//     setPage(0);\n//   };\n//   const handleChangeDense = event => {\n//     setDense(event.target.checked);\n//   };\n//   const isSelected = name => selected.indexOf(name) !== -1;\n//   const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.rows.length - page * rowsPerPage);\n//   if (props.rows) {\n//   return (\n//     <div className={classes.root}>\n//       <Paper className={classes.paper}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table\n//             className={classes.table}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? 'small' : 'medium'}\n//           >\n//             <EnhancedTableHead\n//               classes={classes}\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={props.rows.length}\n//             />\n//             <TableBody>\n//               {stableSort(props.rows, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.name);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => handleClick(event, row.name)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={row.name}\n//                       selected={isItemSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={isItemSelected}\n//                           inputProps={{ 'aria-labelledby': labelId }}\n//                         />\n//                       </TableCell>\n//                       <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n//                         {row.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{row.last_name}</TableCell>\n//                       <TableCell align=\"right\">{row.email}</TableCell>\n//                       <TableCell align=\"right\">{row.position}</TableCell>\n//                       <TableCell align=\"right\">{row.company}</TableCell>\n//                       <TableCell align=\"right\">{row.confidence}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={props.rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'previous page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'next page',\n//           }}\n//           onChangePage={handleChangePage}\n//           onChangeRowsPerPage={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//   </div> \n//   )\n//   } else {\n//     return <div>Loading</div>\n//   };\n// }","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/components/SearchResultsTable.js"],"names":["React","PropTypes","clsx","lighten","makeStyles","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","TableSortLabel","Toolbar","Typography","Paper","Checkbox","IconButton","Tooltip","FormControlLabel","Switch","DeleteIcon","FilterListIcon","connect","addList","addLead","Navbar","EnhancedTable","DataTable","Component","state","listId","leadSelection","company","website","newListName","leadsArray","rows","isLoading","createData","name","last_name","email","position","confidence","createRowData","array","props","leads","emails","forEach","lead","newRow","first_name","value","organization","push","setState","handleSubmit","console","log","userId","auth","user","id","componentDidMount","domain","render","lists","listArray","map","list","key","text","mapStateToProps","listWithLeadNotes","mapDispatchToProps","dispatch"],"mappings":"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EAAEhC,KAAK,CAACgC,IAHP;AAILa,IAAAA,iBAAiB,EAAE7C,KAAK,CAAC6C;AAJpB,GAAP;AAMD,CAPD;;AASA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACL;AACA;AACA;AACApD,IAAAA,OAAO,EAAE,CAACW,UAAD,EAAaH,OAAb,EAAsBC,OAAtB,EAA+BH,MAA/B,EAAuCI,WAAvC,EAAoD0B,MAApD,KAA+D;AACtEgB,MAAAA,QAAQ,CACNpD,OAAO,CAACW,UAAD,EAAaH,OAAb,EAAsBC,OAAtB,EAA+BH,MAA/B,EAAuCI,WAAvC,EAAoD0B,MAApD,CADD,CAAR;AAGD;AARI,GAAP;AAUD,CAXD;;AAaA,eAAetC,OAAO,CAACmD,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChD,SAA7C,CAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport {connect} from 'react-redux';\nimport { addList, addLead } from \"../actions\";\nimport Navbar from \"./Navbar\";\nimport EnhancedTable from \"./EnhancedTable\";\n\n\nclass DataTable extends React.Component {\n  state = {\n    listId: \"\",\n    leadSelection: \"\",\n    company: \"\",\n    website: \"\",\n    newListName: \"\",\n    leadsArray: [],\n    rows: [],\n    isLoading: true\n  }  \n  \n  componentDidMount() {\n    console.log(this.props.leads);\n    const array = this.props.leads;\n    this.createRowData()\n    this.setState({ company: array.organization, website: array.domain });\n  }\n\n  createData = (name, last_name, email, position, company, confidence) => {\n    return { name, last_name, email, position, company, confidence};\n  }\n\n  createRowData = () => {\n    let array = []\n    this.props.leads.emails.forEach(lead => {\n        let newRow = this.createData(lead.first_name, lead.last_name, lead.value, lead.position, this.props.leads.organization, lead.confidence)\n        array.push(newRow)\n    })\n    this.setState({rows: array})\n    this.setState({isLoading: false})\n  }\n  \n  // handleDropdown = (e, data) => {\n  //   const targetValue = data.value;\n  //   this.setState({ listId: targetValue });\n  // };\n\n  // handleChange = e => {\n  //   const targetValue = e.target.value;\n  //   const targetName = e.target.name;\n  //   this.setState({ [targetName]: targetValue });\n  // };\n\n  handleSubmit = () => {\n    const { leadsArray, company, website, listId, newListName } = this.state;\n    console.log(\"SUBMIT\", this.state);\n    const userId = this.props.auth.user.id;\n    this.props.addLead(\n      leadsArray,\n      company,\n      website,\n      listId,\n      newListName,\n      userId\n    );\n  };\n\n  // handleLeadClick = (lead, checked) => {\n  //   console.log(lead);\n  //   console.log(checked);\n  //   if (checked) {\n  //     this.props.listWithLeadNotes.forEach(l => {\n  //       console.log(\"what is l\", l)\n  //       if (l.lead.email !== lead.value) {\n  //         this.setState({ leadsArray: [...this.state.leadsArray, lead] });\n  //       } else {\n  //         return (\n  //           null\n  //         )\n  //       }\n  //     })\n  //   } else {\n  //     const newArray = this.state.leadsArray.filter(\n  //       l => l.value !== lead.value\n  //     );\n  //     this.setState({ leadsArray: newArray });\n  //   }\n  // };\n\n  render() {\n    let lists = this.props.lists;\n    let listArray = lists.map(list => {\n      return {\n        key: list.id,\n        text: list.name,\n        value: list.id\n      };\n    });\n\n    console.log(this.state)\n    if (this.state.isLoading) {\n      return <div>Loading</div>\n    }\n    return (\n      <div>\n        <Navbar />\n        <EnhancedTable addLead={this.props.addLead} company={this.state.company} website={this.state.website} rows={this.state.rows} listArray={listArray} userId={this.props.auth.user.id}/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    leads: state.leads,\n    lists: state.lists,\n    auth: state.auth,\n    listWithLeadNotes: state.listWithLeadNotes\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // addList: (listName, id) => {\n    //   dispatch(addList(listName, id));\n    // },\n    addLead: (leadsArray, company, website, listId, newListName, userId) => {\n      dispatch(\n        addLead(leadsArray, company, website, listId, newListName, userId)\n      );\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataTable)\n\n\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n\n// const headCells = [\n//   { id: 'name', numeric: false, disablePadding: true, label: 'First Name' },\n//   { id: 'last_name', numeric: false, disablePadding: false, label: 'Last Name' },\n//   { id: 'email', numeric: false, disablePadding: false, label: 'Email' },\n//   { id: 'position', numeric: false, disablePadding: false, label: 'Position' },\n//   { id: 'company', numeric: false, disablePadding: false, label: 'Company' },\n//   { id: 'confidence', numeric: true, disablePadding: false, label: 'Confidence' },\n// ];\n\n// function EnhancedTableHead(props) {\n//   const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n//   const createSortHandler = property => event => {\n//     onRequestSort(event, property);\n//   };\n\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{ 'aria-label': 'select all leads' }}\n//           />\n//         </TableCell>\n//         {headCells.map(headCell => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'default'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={order}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <span className={classes.visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </span>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n\n// EnhancedTableHead.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// const useToolbarStyles = makeStyles(theme => ({\n//   root: {\n//     paddingLeft: theme.spacing(2),\n//     paddingRight: theme.spacing(1),\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// }));\n\n// const EnhancedTableToolbar = props => {\n//   const classes = useToolbarStyles();\n//   const { numSelected } = props;\n\n//   return (\n//     <Toolbar\n//       className={clsx(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Nutrition\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n// };\n\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing(3),\n//   },\n//   paper: {\n//     width: '100%',\n//     marginBottom: theme.spacing(2),\n//   },\n//   table: {\n//     minWidth: 750,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n//   visuallyHidden: {\n//     border: 0,\n//     clip: 'rect(0 0 0 0)',\n//     height: 1,\n//     margin: -1,\n//     overflow: 'hidden',\n//     padding: 0,\n//     position: 'absolute',\n//     top: 20,\n//     width: 1,\n//   },\n// }));\n\n// function EnhancedTable(props) {\n//   const classes = useStyles();\n//   const [order, setOrder] = React.useState('asc');\n//   const [orderBy, setOrderBy] = React.useState('last_name');\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n//   const handleRequestSort = (event, property) => {\n//     const isDesc = orderBy === property && order === 'desc';\n//     setOrder(isDesc ? 'asc' : 'desc');\n//     setOrderBy(property);\n//   };\n\n//   const handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       const newSelecteds = props.rows.map(n => n.name);\n//       setSelected(newSelecteds);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n\n//     setSelected(newSelected);\n//   };\n\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n\n//   const handleChangeRowsPerPage = event => {\n//     setRowsPerPage(+event.target.value);\n//     setPage(0);\n//   };\n\n//   const handleChangeDense = event => {\n//     setDense(event.target.checked);\n//   };\n\n//   const isSelected = name => selected.indexOf(name) !== -1;\n\n//   const emptyRows = rowsPerPage - Math.min(rowsPerPage, props.rows.length - page * rowsPerPage);\n//   if (props.rows) {\n//   return (\n//     <div className={classes.root}>\n//       <Paper className={classes.paper}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table\n//             className={classes.table}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? 'small' : 'medium'}\n//           >\n//             <EnhancedTableHead\n//               classes={classes}\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={props.rows.length}\n//             />\n//             <TableBody>\n//               {stableSort(props.rows, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.name);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => handleClick(event, row.name)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={row.name}\n//                       selected={isItemSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           checked={isItemSelected}\n//                           inputProps={{ 'aria-labelledby': labelId }}\n//                         />\n//                       </TableCell>\n//                       <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n//                         {row.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{row.last_name}</TableCell>\n//                       <TableCell align=\"right\">{row.email}</TableCell>\n//                       <TableCell align=\"right\">{row.position}</TableCell>\n//                       <TableCell align=\"right\">{row.company}</TableCell>\n//                       <TableCell align=\"right\">{row.confidence}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={props.rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'previous page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'next page',\n//           }}\n//           onChangePage={handleChangePage}\n//           onChangeRowsPerPage={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//   </div> \n//   )\n//   } else {\n//     return <div>Loading</div>\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}