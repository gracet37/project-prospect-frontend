{"ast":null,"code":"// All the redux actions that relate to the user and authentication\nimport { LOGIN_USER, LOGOUT_USER, ACTION_SUCCESS, FETCH_ERROR, CLEAR_MESSAGE } from './types'; // export function loginUser(user) {\n//   return {\n//     type: LOGIN_USER,\n//     user\n//   };\n// }\n\nexport function logoutUser() {\n  return {\n    type: LOGOUT_USER\n  };\n}\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(token)\n      }\n    }; // dispatch with \"loading\" current user\n\n    return fetch(\"http://localhost:3000\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error\n        history.push(\"/\");\n        console.log(\"current user\", data.error);\n      } else {\n        dispatch(loginUser({\n          user: data.user\n        }));\n      }\n    });\n  };\n} // ? testing\n\nexport function loadUser(loadingCb, successCb, failCb) {\n  return function (dispatch) {\n    loadingCb();\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(token)\n      }\n    };\n    return fetch(\"http://localhost:3000\", reqObj).then(resp => resp.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: ACTION_SUCCESS,\n        user: data\n      });\n      successCb();\n    }).catch(err => {\n      failCb();\n    });\n  };\n}\nexport function login(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(\"http://localhost:3000/api/v1/login\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.message) {\n        //handle error case\n        dispatch({\n          type: \"FETCH_ERROR\",\n          error: data.message\n        });\n      } else {\n        console.log(\"fetch login\", data);\n        localStorage.token = data.token; // dispatch(loginUser({ user: data.user }));\n\n        dispatch({\n          type: CLEAR_MESSAGE\n        });\n        history.push(\"/\");\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n        dispatch({\n          type: FETCH_ERROR,\n          error: data.error\n        });\n      } else {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push(\"/\");\n      }\n    });\n  };\n} // ! I DONT THINK THIS FUNCTION IS FINISHED YET (29/SEP)\n\nexport function updateUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n      } else {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push(\"/profile\");\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/auth.js"],"names":["LOGIN_USER","LOGOUT_USER","ACTION_SUCCESS","FETCH_ERROR","CLEAR_MESSAGE","logoutUser","type","currentUser","history","dispatch","token","localStorage","reqObj","method","headers","Authorization","fetch","then","resp","json","data","error","push","console","log","loginUser","user","loadUser","loadingCb","successCb","failCb","catch","err","login","formData","body","JSON","stringify","message","registerUser","updateUser"],"mappings":"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","sourcesContent":["// All the redux actions that relate to the user and authentication\n\nimport { LOGIN_USER, LOGOUT_USER, ACTION_SUCCESS, FETCH_ERROR, CLEAR_MESSAGE } from './types'\n\n// export function loginUser(user) {\n//   return {\n//     type: LOGIN_USER,\n//     user\n//   };\n// }\n\nexport function logoutUser() {\n  return {\n    type: LOGOUT_USER\n  };\n}\n\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n\n    // dispatch with \"loading\" current user\n\n    return fetch(\"http://localhost:3000\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error\n          history.push(\"/\");\n          console.log(\"current user\", data.error);\n        } else {\n          dispatch(loginUser({ user: data.user }));\n        }\n      });\n  };\n}\n\n// ? testing\nexport function loadUser(loadingCb, successCb, failCb) {\n  return function(dispatch) {\n    loadingCb();\n    const token = localStorage.token;\n    const reqObj = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    };\n\n    return fetch(\"http://localhost:3000\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        dispatch({ type: ACTION_SUCCESS, user: data });\n        successCb();\n      })\n      .catch(err => {\n        failCb();\n      });\n  };\n}\n\nexport function login(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    };\n\n    return fetch(\"http://localhost:3000/api/v1/login\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.message) {\n          //handle error case\n          dispatch({ type: \"FETCH_ERROR\", error: data.message });\n        } else {\n          console.log(\"fetch login\", data);\n          localStorage.token = data.token;\n          // dispatch(loginUser({ user: data.user }));\n          dispatch({ type: CLEAR_MESSAGE });\n          history.push(\"/\");\n        }\n      })\n      .catch(err => console.log(err));\n  };\n}\n\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    };\n\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error case\n          console.log(data.error)\n          dispatch({type: FETCH_ERROR, error: data.error})\n        } else {\n          localStorage.token = data.token;\n          dispatch(loginUser(data.user));\n          history.push(\"/\");\n        }\n      });\n  };\n}\n\n\n// ! I DONT THINK THIS FUNCTION IS FINISHED YET (29/SEP)\nexport function updateUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData)\n    };\n\n    return fetch(\"http://localhost:3000/api/v1/auth\", reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error case\n          console.log(data.error);\n        } else {\n          localStorage.token = data.token;\n          dispatch(loginUser(data.user));\n          history.push(\"/profile\");\n        }\n      });\n  };\n}"]},"metadata":{},"sourceType":"module"}