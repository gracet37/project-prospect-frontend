{"ast":null,"code":"export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n\nconst uuidv1 = require('uuid/v1'); // LOGIN\n\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  };\n}\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  };\n}\nexport function currentUser(history) {\n  return dispatch => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: \"Bearer \".concat(token)\n      }\n    }; // dispatch with \"loading\" current user\n\n    return fetch('http://localhost:3000/api/v1/current_user', reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error\n        history.push('/');\n        console.log(\"current user\", data.error);\n      } else {\n        dispatch(loginUser({\n          user: data.user\n        })); // dispatch\n      }\n    });\n  };\n}\nexport function login(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch('http://localhost:3000/api/v1/login', reqObj).then(resp => resp.json()).then(data => {\n      if (data.message) {\n        //handle error case\n        console.log(\"login error\", data.message);\n      } else {\n        console.log(\"fetch login\", data);\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push('/search');\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function registerUser(formData, history) {\n  return dispatch => {\n    const reqObj = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    };\n    return fetch('http://localhost:3000/api/v1/auth', reqObj).then(resp => resp.json()).then(data => {\n      if (data.error) {\n        //handle error case\n        console.log(data.error);\n      } else {\n        localStorage.token = data.token;\n        dispatch(loginUser(data.user));\n        history.push('/search');\n      }\n    });\n  };\n} ////LOGIN\n\nexport function thunkFetchCategories() {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_CATEGORIES\n    });\n    fetch(\"http://localhost:3000/api/v1/categories\").then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_CATEGORIES,\n        categories: data\n      });\n    });\n  };\n}\nexport function thunkFetchLists(id) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LISTS\n    });\n    fetch(\"http://localhost:3000/users/\".concat(id)).then(res => res.json()).then(data => {\n      console.log(data);\n      dispatch({\n        type: FETCH_LISTS,\n        lists: data.lists\n      });\n    });\n  };\n} // creating a new lead instance of the one the user saved and creating the association between list and lead\n\nexport function addLead(leadsArray, company, website, listId, newListName, userId) {\n  return function (dispatch) {\n    const token = localStorage.token;\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        leads: leadsArray,\n        company: company,\n        website: website\n      }) // body: JSON.stringify({\n      //   first_name: leadObj.first_name,\n      //   last_name: leadObj.last_name, \n      //   email: leadObj.value,\n      //   phone_number: leadObj.phone_number,\n      //   position: leadObj.position,\n      //   confidence_score: leadObj.confidence,\n      //   company: company,\n      //   website: website\n      // })\n\n    }).then(res => res.json()).then(data => {\n      if (listId) {\n        fetch(\"http://localhost:3000/api/v1/leadlists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n          },\n          body: JSON.stringify({\n            list_id: listId,\n            lead_id: data.id\n          })\n        }).catch(err => console.log(err));\n      } else {\n        fetch(\"http://localhost:3000/api/v1/lists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json' // Authorization: \n\n          },\n          body: JSON.stringify({\n            name: newListName,\n            user_id: userId\n          })\n        }).then(res => res.json()).then(data => console.log(data)).catch(err => console.log(err));\n      }\n    }).catch(err => console.log(err));\n  };\n}\nexport function addList(listName) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: ADD_LIST,\n        lists: data\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function thunkFetchLeads(domainName, history) {\n  return function (dispatch) {\n    dispatch({\n      type: START_FETCH_LEADS\n    });\n    fetch(\"https://api.hunter.io/v2/domain-search?domain=\".concat(domainName, \"&limit=10&api_key=7ca084937e5e049696b7bb64c10366c3d077c650\")).then(res => res.json()).then(result => {\n      dispatch({\n        type: FETCH_LEADS,\n        id: uuidv1(),\n        leads: result.data\n      });\n      history.push('/results');\n    }); // ! ASK FOR HELP HERE ////\n    // .then(data => {\n    //   // const dataArray = data[0];\n    //   fetch(\"http://localhost:3000/api/v1/leads\", {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       Accept: \"application/json\"\n    //     },\n    //     body: JSON.stringify({data})\n    //   }).then(res => res.json())\n    //   .then(console.log)\n    //   .catch(err => console.log(err));\n    // });\n  };\n} // .then(console.log\n// const dataArray = data[0];\n// const leadData = dataArray.emails.map(lead => {\n//   return (\n//     first_name: lead.first_name,\n//     last_name: lead.last_name,\n//     confidence_score: lead.confidence,\n//     last_name: params[:last_name],\n//     phone_number: params[:phone_number],\n//     position: params[:position],\n//     email: params[:value],\n//     website: params[:website]\n//   )\n// })\n//   fetch(\"http://localhost:3000/api/v1/leads\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Accept\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//       confidence_score:\n//       first_name:\n//       confidence_score: params[:confidence],\n//       first_name: params[:first_name],\n//       last_name: params[:last_name],\n//       linkedin: params[:linkedin],\n//       phone_number: params[:phone_number],\n//       position: params[:position],\n//       email: params[:value],\n//       website: params[:website]\n//     })\n//   })\n// })\n// .then(result => {\n//   dispatch({ type: FETCH_LEADS, leads: result.data })\n//   history.push('/results')\n// });\n// handleSubmit = () => {\n//   // ACTION - QUERYSEARCH\n//   const domainName = this.state.searchParam\n//   hunter.domainSearch(\n//     {domain: domainName},\n//     function(err, body) {\n//       if (err) {\n//         console.log(err);\n//       } else {\n//         // Will contain same body as the raw API call\n//         console.log(body);\n//       }\n//     }\n//   );\n// }","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/index.js"],"names":["FETCH_CATEGORIES","START_FETCH_CATEGORIES","START_FETCH_LEADS","FETCH_LEADS","START_FETCH_LISTS","FETCH_LISTS","ADD_LIST","LOGIN_USER","LOGOUT_USER","uuidv1","require","loginUser","user","type","logoutUser","currentUser","history","dispatch","token","localStorage","reqObj","method","headers","Authorization","fetch","then","resp","json","data","error","push","console","log","login","formData","body","JSON","stringify","message","catch","err","registerUser","thunkFetchCategories","res","categories","thunkFetchLists","id","lists","addLead","leadsArray","company","website","listId","newListName","userId","leads","list_id","lead_id","name","user_id","addList","listName","thunkFetchLeads","domainName","result"],"mappings":"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","sourcesContent":["export const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\nexport const START_FETCH_CATEGORIES = \"START_FETCH_CATEGORIES\";\nexport const START_FETCH_LEADS = \"START_FETCH_LEADS\";\nexport const FETCH_LEADS = \"FETCH_LEADS\";\nexport const START_FETCH_LISTS = \"FETCH_LISTS\";\nexport const FETCH_LISTS = \"FETCH_LISTS\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const LOGIN_USER = \"LOGIN_USER\";\nexport const LOGOUT_USER = \"LOGOUT_USER\";\n\nconst uuidv1 = require('uuid/v1')\n\n// LOGIN\n\nexport function loginUser(user) {\n  return {\n    type: \"LOGIN_USER\",\n    user\n  }\n}\n\nexport function logoutUser() {\n  return {\n    type: \"LOGOUT_USER\"\n  }\n}\n\nexport function currentUser(history) {\n  return (dispatch) => {\n    const token = localStorage.token;\n    const reqObj = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n// dispatch with \"loading\" current user\n\n    return fetch('http://localhost:3000/api/v1/current_user', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error) {\n          //handle error\n          history.push('/')\n          console.log(\"current user\", data.error)\n        } else {\n          dispatch(loginUser({ user: data.user }))\n          // dispatch\n        }\n      })\n  }\n}\n\nexport function login(formData, history) {\n  return (dispatch) => {\n    const reqObj = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(formData)\n    }\n\n    return fetch('http://localhost:3000/api/v1/login', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.message){\n          //handle error case\n          console.log(\"login error\", data.message)\n        } else {\n          console.log(\"fetch login\", data)\n          localStorage.token = data.token\n          dispatch(loginUser(data.user))\n          history.push('/search')\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport function registerUser(formData, history) {\n  return (dispatch) => {\n    const reqObj = {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(formData)\n    }\n\n    return fetch('http://localhost:3000/api/v1/auth', reqObj)\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.error){\n          //handle error case\n          console.log(data.error)\n        } else {\n          localStorage.token = data.token\n          dispatch(loginUser( data.user ))\n          history.push('/search')\n        }\n      })\n  }\n}\n\n////LOGIN\n\nexport function thunkFetchCategories() {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_CATEGORIES });\n\n    fetch(\"http://localhost:3000/api/v1/categories\")\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_CATEGORIES, categories: data });\n      }); \n  };\n}\n\nexport function thunkFetchLists(id) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LISTS });\n\n    fetch(`http://localhost:3000/users/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        dispatch({ type: FETCH_LISTS, lists: data.lists});\n      }); \n  };\n}\n// creating a new lead instance of the one the user saved and creating the association between list and lead\nexport function addLead(leadsArray, company, website, listId, newListName, userId) {\n  return function(dispatch) {\n    const token = localStorage.token;\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\"http://localhost:3000/api/v1/leads\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        leads: leadsArray,\n        company: company,\n        website: website\n      })\n      // body: JSON.stringify({\n      //   first_name: leadObj.first_name,\n      //   last_name: leadObj.last_name, \n      //   email: leadObj.value,\n      //   phone_number: leadObj.phone_number,\n      //   position: leadObj.position,\n      //   confidence_score: leadObj.confidence,\n      //   company: company,\n      //   website: website\n      // })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (listId) { \n        fetch(\"http://localhost:3000/api/v1/leadlists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n          },\n          body: JSON.stringify({\n            list_id: listId,\n            lead_id: data.id\n          })\n        }).catch(err => console.log(err));\n      } else { \n        fetch(\"http://localhost:3000/api/v1/lists\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": 'application/json',\n            \"Accept\": 'application/json'\n            // Authorization: \n          },\n          body: JSON.stringify({\n            name: newListName, \n            user_id: userId\n          })\n        })\n        .then(res => res.json())\n        .then(data => console.log(data))\n        .catch(err => console.log(err));\n      }\n      })\n      .catch(err => console.log(err)); \n  };\n}\n\nexport function addList(listName) {\n  return function(dispatch) {\n\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"Accept\": 'application/json'\n      },\n      body: JSON.stringify({\n        name: listName\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: ADD_LIST, lists: data})\n      })\n      .catch(err => console.log(err)); \n  };\n}\n\nexport function thunkFetchLeads(domainName, history) {\n  return function(dispatch) {\n    dispatch({ type: START_FETCH_LEADS });\n\n    fetch(\n      `https://api.hunter.io/v2/domain-search?domain=${domainName}&limit=10&api_key=7ca084937e5e049696b7bb64c10366c3d077c650`\n    )\n      .then(res => res.json())\n      .then(result => {\n        dispatch({ type: FETCH_LEADS, id: uuidv1(), leads: result.data })\n        history.push('/results')\n      });\n\n\n      // ! ASK FOR HELP HERE ////\n      // .then(data => {\n      //   // const dataArray = data[0];\n      //   fetch(\"http://localhost:3000/api/v1/leads\", {\n      //     method: \"POST\",\n      //     headers: {\n      //       \"Content-Type\": \"application/json\",\n      //       Accept: \"application/json\"\n      //     },\n      //     body: JSON.stringify({data})\n      //   }).then(res => res.json())\n      //   .then(console.log)\n      //   .catch(err => console.log(err));\n      // });\n  };\n}\n\n// .then(console.log\n// const dataArray = data[0];\n// const leadData = dataArray.emails.map(lead => {\n//   return (\n//     first_name: lead.first_name,\n//     last_name: lead.last_name,\n//     confidence_score: lead.confidence,\n//     last_name: params[:last_name],\n//     phone_number: params[:phone_number],\n//     position: params[:position],\n//     email: params[:value],\n//     website: params[:website]\n//   )\n// })\n//   fetch(\"http://localhost:3000/api/v1/leads\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Accept\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//       confidence_score:\n//       first_name:\n//       confidence_score: params[:confidence],\n//       first_name: params[:first_name],\n//       last_name: params[:last_name],\n//       linkedin: params[:linkedin],\n//       phone_number: params[:phone_number],\n//       position: params[:position],\n//       email: params[:value],\n//       website: params[:website]\n//     })\n//   })\n// })\n// .then(result => {\n//   dispatch({ type: FETCH_LEADS, leads: result.data })\n//   history.push('/results')\n// });\n\n// handleSubmit = () => {\n//   // ACTION - QUERYSEARCH\n//   const domainName = this.state.searchParam\n//   hunter.domainSearch(\n//     {domain: domainName},\n//     function(err, body) {\n//       if (err) {\n//         console.log(err);\n//       } else {\n//         // Will contain same body as the raw API call\n//         console.log(body);\n//       }\n//     }\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}