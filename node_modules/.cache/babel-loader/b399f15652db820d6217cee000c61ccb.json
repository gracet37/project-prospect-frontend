{"ast":null,"code":"var _jsxFileName = \"/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { Grid, Image, Card, Table, Icon, Confirm, Button } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport Navbar from \"./Navbar\";\nimport { deleteList, thunkFetchListById } from \"../actions\";\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      column: null,\n      data: [],\n      direction: null,\n      deleteConfirmation: false,\n      totalLeadCount: 0,\n      totalMeetingsBooked: 0,\n      totalNotContacted: 0\n    };\n\n    this.show = dimmer => this.setState({\n      dimmer,\n      deleteConfirmation: true\n    });\n\n    this.handleConfirm = () => this.setState({\n      deleteConfirmation: false\n    });\n\n    this.handleCancel = () => {\n      this.setState({\n        deleteConfirmation: false\n      }); // let newArray = this.state.data.filter(data => data.id !== id);\n      // this.setState({ data: newArray });\n      // this.props.deleteList(id);\n    };\n\n    this.formattedListArray = () => {\n      // if (this.props.lists.length) {\n      let array = [];\n      this.props.lists.forEach(list => {\n        let date = new Date(list.created_at);\n        let dateString = date.toDateString();\n        array.push({\n          id: list.id,\n          name: list.name,\n          date: dateString\n        });\n      });\n      this.setState({\n        data: array\n      }); // return array\n    };\n\n    this.countMeetingsBooked = () => {\n      let meetingsBookedCount = 0;\n\n      if (this.props.listWithLeadNotes) {\n        this.props.listWithLeadNotes.forEach(lead => {\n          lead.leadnotes.forEach(leadnote => {\n            if (leadnote.status === \"Meeting booked\") {\n              meetingsBookedCount += 1;\n            }\n          });\n        });\n        this.setState({\n          totalMeetingsBooked: meetingsBookedCount\n        });\n      } else {\n        return null;\n      }\n    };\n\n    this.countNotContacted = () => {\n      let notContacted = 0; // let testArray = []\n\n      if (this.props.listWithLeadNotes) {\n        this.props.listWithLeadNotes.forEach(lead => {\n          if (lead.leadnotes.length < 1) {\n            notContacted += 1;\n            console.log(notContacted);\n          }\n        });\n        this.setState({\n          totalNotContacted: notContacted\n        });\n      } else {\n        return null;\n      }\n    };\n\n    this.handleConfirm = (event, id) => {\n      event.preventDefault();\n      console.log(id); // console.log(this.state.data)\n\n      let newArray = this.state.data.filter(data => data.id !== id);\n      this.setState({\n        data: newArray,\n        deleteConfirmation: false\n      });\n      this.countTotalLeads();\n      this.countMeetingsBooked();\n      this.countNotContacted();\n      this.props.deleteList(id); // debugger\n    };\n\n    this.handleRowClick = id => {\n      console.log(\"row clicked\", id);\n      this.props.thunkFetchListById(id, this.props.history);\n    };\n\n    this.handleSort = clickedColumn => () => {\n      const _this$state = this.state,\n            column = _this$state.column,\n            data = _this$state.data,\n            direction = _this$state.direction;\n\n      if (column !== clickedColumn) {\n        this.setState({\n          column: clickedColumn,\n          data: _.sortBy(data, [clickedColumn]),\n          direction: \"ascending\"\n        });\n        return;\n      }\n\n      this.setState({\n        data: data.reverse(),\n        direction: direction === \"ascending\" ? \"descending\" : \"ascending\"\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.formattedListArray(); //  this.countTotalLeads()\n\n    this.countMeetingsBooked();\n    this.countNotContacted();\n  }\n\n  render() {\n    // let data = []\n    // if (this.props.lists.length) {\n    //   this.formattedListArray(this.props.lists)\n    //   // this.setState({data})\n    // }\n    const _this$state2 = this.state,\n          column = _this$state2.column,\n          data = _this$state2.data,\n          direction = _this$state2.direction,\n          totalLeadCount = _this$state2.totalLeadCount,\n          totalMeetingsBooked = _this$state2.totalMeetingsBooked,\n          totalNotContacted = _this$state2.totalNotContacted; // console.log(this.props.lists)\n\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      style: {\n        // position: \"fixed\",\n        top: \"40px\",\n        margin: \"40px\",\n        marginLeft: \"70px\",\n        padding: \"px\"\n      },\n      columns: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Total Leads\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, totalLeadCount), React.createElement(Image, {\n      floated: \"right\",\n      size: \"small\",\n      src: \"https://scontent-ort2-2.xx.fbcdn.net/v/t1.15752-9/71382639_511374239440274_5689414491201077248_n.png?_nc_cat=102&_nc_oc=AQmxMPkcSBw3tsH3vtHdty3xBIiwwwo1u58qIFM6JBWKhgr_vArb8fKIvHJeZbUXVHA&_nc_ht=scontent-ort2-2.xx&oh=5ecbfc218c65ca3f290c9e06988b2804&oe=5DF1636E\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Total Meetings Booked\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, totalMeetingsBooked), React.createElement(Image, {\n      floated: \"right\",\n      size: \"small\",\n      src: \"https://scontent-ort2-2.xx.fbcdn.net/v/t1.15752-9/71338480_839476829779627_88982982114672640_n.png?_nc_cat=103&_nc_oc=AQlz6riL_5nCn_aFSeq7vrwmHLIvmmoEXuFWQLi-o0ouY9NmTb65RrwrN8grKcefjAc&_nc_ht=scontent-ort2-2.xx&oh=abcf184851a1381d3c1e6f1a2655708f&oe=5DF88CFF\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Not Yet Contacted\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, totalNotContacted), React.createElement(Image, {\n      floated: \"right\",\n      size: \"small\",\n      src: \"https://scontent-ort2-2.xx.fbcdn.net/v/t1.15752-9/70880021_751349978649592_7265954774900539392_n.png?_nc_cat=101&_nc_oc=AQn6B5Hc2QHFjLfjzwx8QK_KTfxQXSwEJn6eWDeWtUc5nEU37bRyVKv1v3-ZPPbd7p8&_nc_ht=scontent-ort2-2.xx&oh=9b4a7332352bb07373e20a8830861a35&oe=5E35AB9A\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }))))), React.createElement(Grid.Row, {\n      style: {\n        marginTop: \"40px\",\n        marginLeft: \"70px\"\n      },\n      columns: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"New List\"))), React.createElement(Grid.Row, {\n      style: {\n        // position: \"fixed\",\n        top: \"250px\",\n        margin: \"40px\",\n        minHeight: \"600px\"\n      },\n      columns: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Table, {\n      sortable: true,\n      selectable: true,\n      celled: true,\n      fixed: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      sorted: column === \"name\" ? direction : null,\n      onClick: this.handleSort(\"name\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"List Name\"), React.createElement(Table.HeaderCell, {\n      sorted: column === \"date\" ? direction : null,\n      onClick: this.handleSort(\"date\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Date Created\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Delete List\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, _.map(data, ({\n      id,\n      name,\n      date\n    }) => React.createElement(Table.Row, {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      onClick: () => this.handleRowClick(id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, name), React.createElement(Table.Cell, {\n      onClick: () => this.handleRowClick(id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, date), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"trash alternate outline\",\n      onClick: () => this.show(\"inverted\"),\n      name: \"trash alternate outline\",\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), React.createElement(Confirm, {\n      open: this.state.deleteConfirmation,\n      cancelButton: \"Cancel\",\n      confirmButton: \"Confirm\",\n      onCancel: this.handleCancel,\n      onConfirm: event => this.handleConfirm(event, id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }))))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    lists: state.lists,\n    listWithLeadNotes: state.listWithLeadNotes\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteList: id => {\n      dispatch(deleteList(id));\n    },\n    thunkFetchListById: (id, history) => {\n      dispatch(thunkFetchListById(id, history));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Dashboard));","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/components/Dashboard.js"],"names":["React","Component","Grid","Image","Card","Table","Icon","Confirm","Button","connect","withRouter","_","Navbar","deleteList","thunkFetchListById","Dashboard","state","column","data","direction","deleteConfirmation","totalLeadCount","totalMeetingsBooked","totalNotContacted","show","dimmer","setState","handleConfirm","handleCancel","formattedListArray","array","props","lists","forEach","list","date","Date","created_at","dateString","toDateString","push","id","name","countMeetingsBooked","meetingsBookedCount","listWithLeadNotes","lead","leadnotes","leadnote","status","countNotContacted","notContacted","length","console","log","event","preventDefault","newArray","filter","countTotalLeads","handleRowClick","history","handleSort","clickedColumn","sortBy","reverse","componentDidMount","render","top","margin","marginLeft","padding","marginTop","minHeight","map","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Image, Card, Table, Icon, Confirm, Button } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport Navbar from \"./Navbar\";\nimport { deleteList, thunkFetchListById } from \"../actions\";\n\nclass Dashboard extends Component {\n  // UPDATE DATA WITH LISTS\n  state = {\n    column: null,\n    data: [],\n    direction: null,\n    deleteConfirmation: false,\n    totalLeadCount: 0,\n    totalMeetingsBooked: 0, \n    totalNotContacted: 0\n  };\n\n  componentDidMount() {\n     this.formattedListArray();\n    //  this.countTotalLeads()\n     this.countMeetingsBooked()\n     this.countNotContacted()\n  }\n\n  show = dimmer => this.setState({ dimmer, deleteConfirmation: true });\n  handleConfirm = () => this.setState({ deleteConfirmation: false });\n  handleCancel = () => {\n    this.setState({ deleteConfirmation: false });\n    // let newArray = this.state.data.filter(data => data.id !== id);\n    // this.setState({ data: newArray });\n    // this.props.deleteList(id);\n  };\n\n  formattedListArray = () => {\n    // if (this.props.lists.length) {\n    let array = [];\n    this.props.lists.forEach(list => {\n      let date = new Date(list.created_at);\n      let dateString = date.toDateString();\n      array.push({\n        id: list.id,\n        name: list.name,\n        date: dateString\n      });\n    });\n    this.setState({ data: array });\n    // return array\n  };\n\n  // countTotalLeads = () => {\n  //   if (this.props.lists) {\n  //   let leadCountArray = []\n  //   let totalLeads\n  //   console.log(this.props.lists)\n  //   this.props.lists.forEach(list => {\n  //     let count = list.leads.length\n  //     leadCountArray.push(count)\n  //   })\n  //   totalLeads = leadCountArray.reduce((total, count) => total + count)\n  //   this.setState({totalLeadCount: totalLeads})\n  //   } else {\n  //     return null\n  //   }\n  // }\n\n  countMeetingsBooked = () => {\n    let meetingsBookedCount = 0\n    if (this.props.listWithLeadNotes) {\n      this.props.listWithLeadNotes.forEach(lead => {\n        lead.leadnotes.forEach(leadnote => {\n          if(leadnote.status === \"Meeting booked\") {\n            meetingsBookedCount += 1\n          }\n        })\n      })\n      this.setState({totalMeetingsBooked: meetingsBookedCount})\n      } else {\n        return null\n      }\n  }\n\n    countNotContacted = () => {\n    let notContacted = 0\n    // let testArray = []\n    if (this.props.listWithLeadNotes) {\n      this.props.listWithLeadNotes.forEach(lead => {\n        if (lead.leadnotes.length < 1) {\n          notContacted += 1\n          console.log(notContacted)\n        }\n      })\n      this.setState({totalNotContacted: notContacted})\n      } else {\n        return null\n      }\n  }\n\n  handleConfirm = (event, id) => {\n    event.preventDefault()\n    console.log(id)\n    // console.log(this.state.data)\n    let newArray = this.state.data.filter(data => data.id !== id);\n    this.setState({ data: newArray, deleteConfirmation: false });\n    this.countTotalLeads()\n    this.countMeetingsBooked()\n    this.countNotContacted()\n    this.props.deleteList(id);\n    // debugger\n  };\n\n  handleRowClick = id => {\n    console.log(\"row clicked\", id);\n    this.props.thunkFetchListById(id, this.props.history);\n  };\n\n  handleSort = clickedColumn => () => {\n    const { column, data, direction } = this.state;\n\n    if (column !== clickedColumn) {\n      this.setState({\n        column: clickedColumn,\n        data: _.sortBy(data, [clickedColumn]),\n        direction: \"ascending\"\n      });\n\n      return;\n    }\n\n    this.setState({\n      data: data.reverse(),\n      direction: direction === \"ascending\" ? \"descending\" : \"ascending\"\n    });\n  };\n\n  render() {\n    // let data = []\n    // if (this.props.lists.length) {\n    //   this.formattedListArray(this.props.lists)\n    //   // this.setState({data})\n    // }\n    const { column, data, direction, totalLeadCount, totalMeetingsBooked, totalNotContacted } = this.state;\n    // console.log(this.props.lists)\n    console.log(this.state);\n    return (\n      <div>\n        {/* <Navbar /> */}\n        <Grid >\n          <Grid.Row\n            style={{\n              // position: \"fixed\",\n              top: \"40px\",\n              margin: \"40px\",\n              marginLeft: \"70px\",\n              padding: \"px\"\n            }}\n            columns={3}\n          >\n            <Grid.Column>\n              <Card>\n                <Card.Content>\n                  <Card.Header>Total Leads</Card.Header>\n                  <Card.Description>{totalLeadCount}</Card.Description>\n                  <Image\n                    floated=\"right\"\n                    size=\"small\"\n                    src=\"https://scontent-ort2-2.xx.fbcdn.net/v/t1.15752-9/71382639_511374239440274_5689414491201077248_n.png?_nc_cat=102&_nc_oc=AQmxMPkcSBw3tsH3vtHdty3xBIiwwwo1u58qIFM6JBWKhgr_vArb8fKIvHJeZbUXVHA&_nc_ht=scontent-ort2-2.xx&oh=5ecbfc218c65ca3f290c9e06988b2804&oe=5DF1636E\"\n                  />\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n            <Grid.Column>\n              <Card>\n                <Card.Content>\n                  <Card.Header>Total Meetings Booked</Card.Header>\n                  <Card.Description>{totalMeetingsBooked}</Card.Description>\n                  <Image\n                    floated=\"right\"\n                    size=\"small\"\n                    src=\"https://scontent-ort2-2.xx.fbcdn.net/v/t1.15752-9/71338480_839476829779627_88982982114672640_n.png?_nc_cat=103&_nc_oc=AQlz6riL_5nCn_aFSeq7vrwmHLIvmmoEXuFWQLi-o0ouY9NmTb65RrwrN8grKcefjAc&_nc_ht=scontent-ort2-2.xx&oh=abcf184851a1381d3c1e6f1a2655708f&oe=5DF88CFF\"\n                  />\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n            <Grid.Column>\n              <Card>\n                <Card.Content>\n                  <Card.Header>Not Yet Contacted</Card.Header>\n                  <Card.Description>{totalNotContacted}</Card.Description>\n                  <Image\n                    floated=\"right\"\n                    size=\"small\"\n                    src=\"https://scontent-ort2-2.xx.fbcdn.net/v/t1.15752-9/70880021_751349978649592_7265954774900539392_n.png?_nc_cat=101&_nc_oc=AQn6B5Hc2QHFjLfjzwx8QK_KTfxQXSwEJn6eWDeWtUc5nEU37bRyVKv1v3-ZPPbd7p8&_nc_ht=scontent-ort2-2.xx&oh=9b4a7332352bb07373e20a8830861a35&oe=5E35AB9A\"\n                  />\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row style={{ marginTop: \"40px\", marginLeft: \"70px\" }} columns={1}>\n            <Grid.Column >\n            <Button>New List</Button>\n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row\n            style={{\n              // position: \"fixed\",\n              top: \"250px\",\n              margin: \"40px\",\n              minHeight: \"600px\"\n            }}\n            columns={1}\n          >\n            <Grid.Column>\n              <Table sortable selectable celled fixed>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell\n                      sorted={column === \"name\" ? direction : null}\n                      onClick={this.handleSort(\"name\")}\n                    >\n                      List Name\n                    </Table.HeaderCell>\n                    {/* <Table.HeaderCell\n                      sorted={column === \"meetings\" ? direction : null}\n                      onClick={this.handleSort(\"meetings\")}\n                    >\n                      Meetings Booked\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                      sorted={column === \"total\" ? direction : null}\n                      onClick={this.handleSort(\"total\")}\n                    >\n                      Total Leads\n                    </Table.HeaderCell> */}\n                    <Table.HeaderCell\n                      sorted={column === \"date\" ? direction : null}\n                      onClick={this.handleSort(\"date\")}\n                    >\n                      Date Created\n                    </Table.HeaderCell>\n                    <Table.HeaderCell\n                    >\n                      Delete List\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {_.map(data, ({ id, name, date }) => (\n                    <Table.Row key={id}>\n                      <Table.Cell onClick={() => this.handleRowClick(id)}>\n                        {name}\n                      </Table.Cell>\n                      {/* <Table.Cell\n                        onClick={() => this.handleRowClick(id)}\n                      ></Table.Cell>\n                      <Table.Cell\n                        onClick={() => this.handleRowClick(id)}\n                      ></Table.Cell> */}\n                      <Table.Cell onClick={() => this.handleRowClick(id)}>\n                        {date}\n                      </Table.Cell>\n                      {/* <Table.Cell><Icon name={'trash alternate outline'} onClick={(event) => this.handleDeleteClick(event, id)} name='trash alternate outline' size='large' /></Table.Cell> */}\n                      <Table.Cell>\n                        <Icon\n                          name={\"trash alternate outline\"}\n                          onClick={() => this.show(\"inverted\")}\n                          name=\"trash alternate outline\"\n                          size=\"large\"\n                        />\n                      <Confirm\n                        open={this.state.deleteConfirmation}\n                        cancelButton=\"Cancel\"\n                        confirmButton=\"Confirm\"\n                        onCancel={this.handleCancel}\n                        onConfirm={(event) => this.handleConfirm(event, id)}\n                      />\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    lists: state.lists,\n    listWithLeadNotes: state.listWithLeadNotes\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteList: id => {\n      dispatch(deleteList(id));\n    },\n    thunkFetchListById: (id, history) => {\n      dispatch(thunkFetchListById(id, history));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(Dashboard));\n"]},"metadata":{},"sourceType":"module"}