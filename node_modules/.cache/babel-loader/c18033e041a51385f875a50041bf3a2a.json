{"ast":null,"code":"// All redux functions that relate to lists\nimport { FETCH_LISTS, FETCH_LIST_BY_ID, START_DELETE_LIST, FETCH_LIST_WITH_LEADNOTES, ADD_LIST, SUCCESS_MESSAGE, DELETE_LIST, DELETE_LIST_WITH_LEADNOTE, SORT_LISTS } from './types';\n\nconst uuidv1 = require(\"uuid/v1\"); // ? Invoked on App.js and fetches all lists in array format with leads data\n// ? Used to populate the Dashboard.js\n\n\nexport function thunkFetchLists(id) {\n  return function (dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n    fetch(\"http://localhost:3000/api/v1/lists/show_lists/\".concat(id)).then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_LISTS,\n        lists: data\n      });\n    }).catch(err => console.log(err));\n  };\n} // ? Search by id of the LIST and return a list with leads and leadnote data\n// ? Used to populate LeadList.js\n\nexport function thunkFetchListById(id, user_id, history) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists/show_special/\".concat(id)).then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_LIST_BY_ID,\n        leads: data.leads,\n        list: data.list\n      });\n      history.push(\"/leads\");\n    }).catch(err => console.log(err));\n  };\n}\nexport function thunkFetchAllListById(id) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists/show_special_all/\".concat(id)).then(res => res.json()).then(data => {\n      dispatch({\n        type: FETCH_LIST_WITH_LEADNOTES,\n        leads: data.leads_with_notes\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function addList(newListName, userId) {\n  return function (dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        name: newListName,\n        user_id: userId\n      })\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: ADD_LIST,\n        list: data\n      });\n      dispatch({\n        type: SUCCESS_MESSAGE,\n        message: \"ðŸŽ‰ List Created!\"\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function deleteList(id) {\n  return function (dispatch) {\n    dispatch({\n      type: START_DELETE_LIST\n    });\n    fetch(\"http://localhost:3000/api/v1/lists/\".concat(id), {\n      method: \"DELETE\"\n    }).then(res => res.json()).then(data => {\n      dispatch({\n        type: DELETE_LIST,\n        id\n      });\n      dispatch({\n        type: DELETE_LIST_WITH_LEADNOTE,\n        id\n      });\n      dispatch({\n        type: SUCCESS_MESSAGE,\n        message: data.message\n      });\n    }).catch(err => console.log(err));\n  };\n}\nexport function sortLists(lists) {\n  return function (dispatch) {\n    dispatch({\n      type: SORT_LISTS,\n      lists\n    });\n  };\n}","map":{"version":3,"sources":["/Users/gracetan/Development/module-projects/module-five-project/project-prospect-frontend/src/actions/lists.js"],"names":["FETCH_LISTS","FETCH_LIST_BY_ID","START_DELETE_LIST","FETCH_LIST_WITH_LEADNOTES","ADD_LIST","SUCCESS_MESSAGE","DELETE_LIST","DELETE_LIST_WITH_LEADNOTE","SORT_LISTS","uuidv1","require","thunkFetchLists","id","dispatch","fetch","then","res","json","data","type","lists","catch","err","console","log","thunkFetchListById","user_id","history","leads","list","push","thunkFetchAllListById","leads_with_notes","addList","newListName","userId","method","headers","Accept","body","JSON","stringify","name","message","deleteList","sortLists"],"mappings":"AAAA;AAEA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,iBAAxC,EAA2DC,yBAA3D,EAAsFC,QAAtF,EAAgGC,eAAhG,EAAiHC,WAAjH,EAA8HC,yBAA9H,EAAyJC,UAAzJ,QAA2K,SAA3K;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB,C,CAGA;AACA;;;AAEA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAClC,SAAO,UAASC,QAAT,EAAmB;AACxB;AAEAC,IAAAA,KAAK,yDAAkDF,EAAlD,EAAL,CACGG,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZL,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEnB,WAAR;AAAqBoB,QAAAA,KAAK,EAAEF;AAA5B,OAAD,CAAR;AACD,KAJH,EAKGG,KALH,CAKSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALhB;AAMD,GATD;AAUD,C,CAED;AACA;;AAEA,OAAO,SAASG,kBAAT,CAA4Bb,EAA5B,EAAgCc,OAAhC,EAAyCC,OAAzC,EAAkD;AACvD,SAAO,UAASd,QAAT,EAAmB;AACxBC,IAAAA,KAAK,2DAAoDF,EAApD,EAAL,CACGG,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAElB,gBADC;AAEP2B,QAAAA,KAAK,EAAEV,IAAI,CAACU,KAFL;AAGPC,QAAAA,IAAI,EAAEX,IAAI,CAACW;AAHJ,OAAD,CAAR;AAKAF,MAAAA,OAAO,CAACG,IAAR,CAAa,QAAb;AACD,KATH,EAUGT,KAVH,CAUSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAVhB;AAWD,GAZD;AAaD;AAED,OAAO,SAASS,qBAAT,CAA+BnB,EAA/B,EAAmC;AACxC,SAAO,UAASC,QAAT,EAAmB;AACxBC,IAAAA,KAAK,+DAAwDF,EAAxD,EAAL,CACGG,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAEhB,yBADC;AAEPyB,QAAAA,KAAK,EAAEV,IAAI,CAACc;AAFL,OAAD,CAAR;AAID,KAPH,EAQGX,KARH,CAQSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CARhB;AASD,GAVD;AAWD;AAGD,OAAO,SAASW,OAAT,CAAiBC,WAAjB,EAA8BC,MAA9B,EAAsC;AAC3C,SAAO,UAAStB,QAAT,EAAmB;AACxBC,IAAAA,KAAK,CAAC,oCAAD,EAAuC;AAC1CsB,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAFiC;AAM1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,IAAI,EAAER,WADa;AAEnBR,QAAAA,OAAO,EAAES;AAFU,OAAf;AANoC,KAAvC,CAAL,CAWGpB,IAXH,CAWQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAXf,EAYGF,IAZH,CAYQG,IAAI,IAAI;AACZL,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEf,QAAR;AAAkByB,QAAAA,IAAI,EAAEX;AAAxB,OAAD,CAAR;AACAL,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEd,eAAR;AAAyBsC,QAAAA,OAAO,EAAE;AAAlC,OAAD,CAAR;AACD,KAfH,EAgBGtB,KAhBH,CAgBSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAhBhB;AAiBD,GAlBD;AAmBD;AAGD,OAAO,SAASsB,UAAT,CAAoBhC,EAApB,EAAwB;AAC7B,SAAO,UAASC,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AAEAY,IAAAA,KAAK,8CAAuCF,EAAvC,GAA6C;AAChDwB,MAAAA,MAAM,EAAE;AADwC,KAA7C,CAAL,CAGGrB,IAHH,CAGQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHf,EAIGF,IAJH,CAIQG,IAAI,IAAI;AACZL,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEb,WAAR;AAAqBM,QAAAA;AAArB,OAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEZ,yBAAR;AAAmCK,QAAAA;AAAnC,OAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEd,eAAR;AAAyBsC,QAAAA,OAAO,EAAEzB,IAAI,CAACyB;AAAvC,OAAD,CAAR;AACD,KARH,EASGtB,KATH,CASSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAThB;AAUD,GAbD;AAcD;AAGD,OAAO,SAASuB,SAAT,CAAmBzB,KAAnB,EAA0B;AAC/B,SAAO,UAASP,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAEX,UAAP;AAAmBY,MAAAA;AAAnB,KAAD,CAAR;AACD,GAFD;AAGD","sourcesContent":["// All redux functions that relate to lists\n\nimport { FETCH_LISTS, FETCH_LIST_BY_ID, START_DELETE_LIST, FETCH_LIST_WITH_LEADNOTES, ADD_LIST, SUCCESS_MESSAGE, DELETE_LIST, DELETE_LIST_WITH_LEADNOTE, SORT_LISTS } from './types'\n\nconst uuidv1 = require(\"uuid/v1\");\n\n\n// ? Invoked on App.js and fetches all lists in array format with leads data\n// ? Used to populate the Dashboard.js\n\nexport function thunkFetchLists(id) {\n  return function(dispatch) {\n    // dispatch({ type: START_FETCH_LISTS });\n\n    fetch(`http://localhost:3000/api/v1/lists/show_lists/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: FETCH_LISTS, lists: data });\n      })\n      .catch(err => console.log(err));\n  };\n}\n\n// ? Search by id of the LIST and return a list with leads and leadnote data\n// ? Used to populate LeadList.js\n\nexport function thunkFetchListById(id, user_id, history) {\n  return function(dispatch) {\n    fetch(`http://localhost:3000/api/v1/lists/show_special/${id}`, )\n      .then(res => res.json())\n      .then(data => {\n        dispatch({\n          type: FETCH_LIST_BY_ID,\n          leads: data.leads,\n          list: data.list\n        });\n        history.push(\"/leads\");\n      })\n      .catch(err => console.log(err));\n  };\n}\n\nexport function thunkFetchAllListById(id) {\n  return function(dispatch) {\n    fetch(`http://localhost:3000/api/v1/lists/show_special_all/${id}`)\n      .then(res => res.json())\n      .then(data => {\n        dispatch({\n          type: FETCH_LIST_WITH_LEADNOTES,\n          leads: data.leads_with_notes\n        });\n      })\n      .catch(err => console.log(err));\n  };\n}\n\n\nexport function addList(newListName, userId) {\n  return function(dispatch) {\n    fetch(\"http://localhost:3000/api/v1/lists\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        name: newListName,\n        user_id: userId\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: ADD_LIST, list: data });\n        dispatch({ type: SUCCESS_MESSAGE, message: \"ðŸŽ‰ List Created!\" });\n      })\n      .catch(err => console.log(err));\n  };\n}\n\n\nexport function deleteList(id) {\n  return function(dispatch) {\n    dispatch({ type: START_DELETE_LIST });\n\n    fetch(`http://localhost:3000/api/v1/lists/${id}`, {\n      method: \"DELETE\"\n    })\n      .then(res => res.json())\n      .then(data => {\n        dispatch({ type: DELETE_LIST, id });\n        dispatch({ type: DELETE_LIST_WITH_LEADNOTE, id });\n        dispatch({ type: SUCCESS_MESSAGE, message: data.message });\n      })\n      .catch(err => console.log(err));\n  };\n}\n\n\nexport function sortLists(lists) {\n  return function(dispatch) {\n    dispatch({type: SORT_LISTS, lists})\n  }\n}"]},"metadata":{},"sourceType":"module"}