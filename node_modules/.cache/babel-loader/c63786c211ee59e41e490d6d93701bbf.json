{"ast":null,"code":"var util = require('util');\n\nvar Stream = require('stream');\n\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nmodule.exports = StringStream;\nmodule.exports.AlignedStringDecoder = AlignedStringDecoder;\n\nfunction StringStream(from, to) {\n  if (!(this instanceof StringStream)) return new StringStream(from, to);\n  Stream.call(this);\n  if (from == null) from = 'utf8';\n  this.readable = this.writable = true;\n  this.paused = false;\n  this.toEncoding = to == null ? from : to;\n  this.fromEncoding = to == null ? '' : from;\n  this.decoder = new AlignedStringDecoder(this.toEncoding);\n}\n\nutil.inherits(StringStream, Stream);\n\nStringStream.prototype.write = function (data) {\n  if (!this.writable) {\n    var err = new Error('stream not writable');\n    err.code = 'EPIPE';\n    this.emit('error', err);\n    return false;\n  }\n\n  if (this.fromEncoding) {\n    if (Buffer.isBuffer(data) || typeof data === 'number') data = data.toString();\n    data = new Buffer(data, this.fromEncoding);\n  }\n\n  var string = this.decoder.write(data);\n  if (string.length) this.emit('data', string);\n  return !this.paused;\n};\n\nStringStream.prototype.flush = function () {\n  if (this.decoder.flush) {\n    var string = this.decoder.flush();\n    if (string.length) this.emit('data', string);\n  }\n};\n\nStringStream.prototype.end = function () {\n  if (!this.writable && !this.readable) return;\n  this.flush();\n  this.emit('end');\n  this.writable = this.readable = false;\n  this.destroy();\n};\n\nStringStream.prototype.destroy = function () {\n  this.decoder = null;\n  this.writable = this.readable = false;\n  this.emit('close');\n};\n\nStringStream.prototype.pause = function () {\n  this.paused = true;\n};\n\nStringStream.prototype.resume = function () {\n  if (this.paused) this.emit('drain');\n  this.paused = false;\n};\n\nfunction AlignedStringDecoder(encoding) {\n  StringDecoder.call(this, encoding);\n\n  switch (this.encoding) {\n    case 'base64':\n      this.write = alignedWrite;\n      this.alignedBuffer = new Buffer(3);\n      this.alignedBytes = 0;\n      break;\n  }\n}\n\nutil.inherits(AlignedStringDecoder, StringDecoder);\n\nAlignedStringDecoder.prototype.flush = function () {\n  if (!this.alignedBuffer || !this.alignedBytes) return '';\n  var leftover = this.alignedBuffer.toString(this.encoding, 0, this.alignedBytes);\n  this.alignedBytes = 0;\n  return leftover;\n};\n\nfunction alignedWrite(buffer) {\n  var rem = (this.alignedBytes + buffer.length) % this.alignedBuffer.length;\n  if (!rem && !this.alignedBytes) return buffer.toString(this.encoding);\n  var returnBuffer = new Buffer(this.alignedBytes + buffer.length - rem);\n  this.alignedBuffer.copy(returnBuffer, 0, 0, this.alignedBytes);\n  buffer.copy(returnBuffer, this.alignedBytes, 0, buffer.length - rem);\n  buffer.copy(this.alignedBuffer, 0, buffer.length - rem, buffer.length);\n  this.alignedBytes = rem;\n  return returnBuffer.toString(this.encoding);\n}","map":null,"metadata":{},"sourceType":"script"}